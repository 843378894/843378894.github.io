<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack-入门使用</title>
      <link href="/2023/04/24/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-webpack/"/>
      <url>/2023/04/24/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack-是什么"><a href="#webpack-是什么" class="headerlink" title="webpack 是什么"></a>webpack 是什么</h3><p>webpack 是代码编译工具，有入口、出口、loader 和插件。webpack 是一个用于现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。</p><h3 id="使用-webpack-创建一个项目"><a href="#使用-webpack-创建一个项目" class="headerlink" title="使用 webpack 创建一个项目"></a>使用 webpack 创建一个项目</h3><ol><li><p>创建一个文件夹,以你的项目名称命名</p></li><li><p>初始化 npm 用来安装依赖包<br><code>npm init -y</code></p></li><li><p>安装 webpack，接着安装 webpack-cli 执行下面命令就行<br><code>npm install webpack webpack-cli --save-dev</code></p></li><li><p>现在的项目什么都还没有我们要按需创建自己的文件夹和文件，</p><ol><li>先创建 index.html 文件必不可少的</li><li>创建 src 文件夹与 index.html 同级</li><li>src 文件夹下面创建一个入口文件 index.js 随便写点啥吧如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import _ from &#x27;lodash&#x27;;</span><br><span class="line">function component() &#123;</span><br><span class="line">const element = document.createElement(&#x27;div&#x27;);</span><br><span class="line">element.innerHTML = \_.join([&#x27;Hello&#x27;, &#x27;webpack&#x27;], &#x27; &#x27;);</span><br><span class="line">return element;</span><br><span class="line">&#125;</span><br><span class="line">document.body.appendChild(component());</span><br></pre></td></tr></table></figure></li><li>现在我们是不是就可以通过访问 html 文件打开项目了，但是和 vue-cli 那种 npm run dev 打开的怎么弄呢</li><li>创建 dist 文件夹这个是放置打包文件的</li></ol></li><li><p>现在我们就要来设置脚本了能够使用 npm run dev 启动项目</p><ol><li><p>我们先安装一个插件 webpack-dev-server 插件会监听源代码，当修改了源代码 webpack 会自动对项目进行打包构建<br><code>npm install webpack-dev-server</code></p></li><li><p>并且在 package.json 文件中添加脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;my-micro-app&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">&quot;description&quot;: &quot;&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;webpack server&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;keywords&quot;: [],</span><br><span class="line">&quot;author&quot;: &quot;&quot;,</span><br><span class="line">&quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;html-webpack-plugin&quot;: &quot;^5.5.1&quot;,</span><br><span class="line">  &quot;webpack&quot;: &quot;^5.80.0&quot;,</span><br><span class="line">  &quot;webpack-cli&quot;: &quot;^5.0.2&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;webpack-dev-server&quot;: &quot;^4.13.3&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果你认真看了你就会发现”main”:”index.js”被我们去除了这个你往下看就知道了</p></li><li><p>我们现在执行 npm run dev 就能直接运行项目了如果不行先配置一下 webpack.config.js</p></li></ol></li><li><p>我们现在要创建 webpack.config.js</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">var htmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 打包的入口文件</span><br><span class="line">  entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">  // 打包时的出口</span><br><span class="line">  output: &#123;</span><br><span class="line">    // 打包生成js的名称</span><br><span class="line">    filename: &#x27;main.js&#x27;,</span><br><span class="line">    // 打包的文件放置的地方__dirname是根目录可以去看看nodejs path了解</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">  &#125;,</span><br><span class="line">  // 这里是我们启动时的配置</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: true, //自动打开浏览器</span><br><span class="line">    hot: true, //热更新</span><br><span class="line">    host: &#x27;localhost&#x27;, //本地域名</span><br><span class="line">    port: 8080, //端口号</span><br><span class="line">    proxy: &#123;&#125;, //同vue.config.js 里面的代理配置</span><br><span class="line">  &#125;,</span><br><span class="line">  // 这里是环境配置</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  plugins: [</span><br><span class="line">    // 添加plugins节点配置插件</span><br><span class="line">    new htmlWebpackPlugin(&#123;</span><br><span class="line">      title: &#x27;Development&#x27;,</span><br><span class="line">      template: path.join(__dirname, &#x27;src/index.html&#x27;), //模板路径</span><br><span class="line">      filename: &#x27;index.html&#x27;, //自动生成的HTML文件的名称</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>细心的朋友会发现我安装了 html-webpack-plugin 插件，该插件的作用是安装指定的模板在 dist 文件夹中生成一个 html 文件并且会将我们打包好的 main.js 文件引入进去。这样做的作用是什么呢，难道我们手写不行嘛，这样的原因是我们在二次打包的时候会先清除掉上一次打包的东西。动态生成就方便了不用再去关注了。</li><li>安装 html-webpack-plugin 执行下面命令然后按上面的配置就行了。这样一个基本的项目就搭建起来了。能够打包能够本地运行了<br><code>npm i html-webpack-plugin --save-dev</code></li></ol><p>每天碎片化的学一点点我们就长进一点点。不管有没有用先学起来。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟接口-mockjs</title>
      <link href="/2023/04/23/%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3-mockjs/"/>
      <url>/2023/04/23/%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3-mockjs/</url>
      
        <content type="html"><![CDATA[<h3 id="mockjs-是做什么用的呢"><a href="#mockjs-是做什么用的呢" class="headerlink" title="mockjs 是做什么用的呢"></a>mockjs 是做什么用的呢</h3><blockquote><p>mockjs 是为了我们前端人员在页面 ui 已经画好了的情况下，后端兄弟们没有及时跟上接口的时候不至于闲着。我们自己模拟接口请求数据做交互，提前将任务完善。</p></blockquote><h3 id="mockjs-如何使用"><a href="#mockjs-如何使用" class="headerlink" title="mockjs 如何使用"></a>mockjs 如何使用</h3><blockquote><p>mockjs 的功能很强大，能够生成随机参数之类的。我就说说我实际使用情况吧，简单粗暴</p></blockquote><ol><li>下载 mockjs<blockquote><p>npm i mockjs -D</p></blockquote></li><li>创建 mock 文件夹新建 index.js</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  import Mock from &#x27;mockjs&#x27;</span><br><span class="line">  const baseUrl = &#x27; http://localhost:4000/&#x27;</span><br><span class="line">  // 你要返回的数据你PRD上的数据结构</span><br><span class="line">  const data =&#123;&#125;</span><br><span class="line">  &lt;!-- 你PRD上的接口地址 --&gt;</span><br><span class="line">Mock.mock(baseUrl+&#x27;/a/b/c&#x27;,&#x27;post&#x27;,(data)=&gt;&#123;</span><br><span class="line">  return data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>main.js 中引入你刚刚创建的 mock&#x2F;index.js<br><code> import &#39;@/mock/index.js&#39;</code></li><li>上面就是 mockjs 的使用这样就能拦截掉你的请求，对不在 mock&#x2F;index.js 中的接口无影响，按照你需要的数据接口，你需要的接口构造一下就完全符合了你的接口请求要求</li><li>注意哦，mock 的东西不要上传到库中。接口能联调之后直接将 main.js 中的引用注释掉</li></ol><p>mockjs 是一款非常实用的接口模拟插件</p>]]></content>
      
      
      <categories>
          
          <category> 模拟接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端-基座搭建</title>
      <link href="/2023/04/23/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E5%9F%BA%E5%BA%A7%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/04/23/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E5%9F%BA%E5%BA%A7%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="微前端是现在企业级应用无法避免的一个问题"><a href="#微前端是现在企业级应用无法避免的一个问题" class="headerlink" title="微前端是现在企业级应用无法避免的一个问题"></a>微前端是现在企业级应用无法避免的一个问题</h3><p>微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为把多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发、独立部署。</p><p>微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。</p><p>微前端的实现意味着对前端应用的拆分。拆分应用的目的并不只是为了在架构上好看，它还可以提升开发效率。比如 10 万行的代码拆解成 10 个项目，每个项目 1 万行代码，要独立维护每个项目就会容易得多。而我们只需要实现应用的自治，即实现应用的独立开发和独立部署，就可以在某种程度上实现微前端架构的目的。</p><h3 id="对微前端架构的对比个人偏好-micro-app"><a href="#对微前端架构的对比个人偏好-micro-app" class="headerlink" title="对微前端架构的对比个人偏好 micro-app"></a>对微前端架构的对比个人偏好 micro-app</h3><blockquote><p>micro-app 是京东零售在 2021 年开源的一套微前端架构</p></blockquote><h3 id="micro-app-的优势"><a href="#micro-app-的优势" class="headerlink" title="micro-app 的优势"></a>micro-app 的优势</h3><ol><li>使用简单<br>我们将所有功能都封装到一个类 WebComponent 组件中，从而实现在基座应用中嵌入一行代码即可渲染一个微前端应用。</li></ol><p>同时 micro-app 还提供了 js 沙箱、样式隔离、元素隔离、预加载、数据通信、静态资源补全等一系列完善的功能。</p><ol start="2"><li><p>零依赖<br>micro-app 没有任何依赖，这赋予它小巧的体积和更高的扩展性。</p></li><li><p>兼容所有框架<br>为了保证各个业务之间独立开发、独立部署的能力，micro-app 做了诸多兼容，在任何技术框架中都可以正常运行。</p></li></ol><h3 id="micro-app-的使用"><a href="#micro-app-的使用" class="headerlink" title="micro-app 的使用"></a>micro-app 的使用</h3><ol><li>基座项目搭建<blockquote><p>纯粹个人偏好,将基座独立搭建成一个项目，该项目的作用就是承载基座和路由配置管理,以及公共方法数据的派发监听。<br>使用 vue-cli 或者 webpack 创建项目,因为维护等问题目前在 vite 搭建的项目中还有很多坑不建议使用 vite，据官方所述会开发 vite 兼容版本但是目前大环境下比较难等待后期再说。</p></blockquote></li><li>当你按照正常项目搭建好了之后就要下载 micro-app。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @micro-zoe/micro-app --save</span><br></pre></td></tr></table></figure><ol start="3"><li>在入口文件中引入插件并且执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// main.js || index.js</span><br><span class="line">import microApp from &#x27;@micro-zoe/micro-app&#x27;</span><br><span class="line"></span><br><span class="line">microApp.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>正常书写路由,但是这个时候你要考虑将子系统放置的位置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const routes = [&#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        name: &#x27;Home&#x27;,</span><br><span class="line">        component: () =&gt;</span><br><span class="line">            import (&#x27;../components/Home.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &lt;!-- 这里都是承载子系统的组件，相当于写了一个放置&lt;router-view&gt;&lt;/router-view&gt;的地方 --&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/vue2/*&#x27;,</span><br><span class="line">        name: &#x27;vue2&#x27;,</span><br><span class="line">        component: () =&gt;</span><br><span class="line">            import (&#x27;../components/vue2Page.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/vue3/*&#x27;,</span><br><span class="line">        name: &#x27;vue3&#x27;,</span><br><span class="line">        component: () =&gt;</span><br><span class="line">            import (&#x27;../components/vue3Page.vue&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    mode: &#x27;history&#x27;,</span><br><span class="line">    routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p>这里是基座放置子系统的文件 vue2Page.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// url就是你要导入进来的子系统例如：https://www.baidu.com/百度</span><br><span class="line">// vue2Page.vue配置</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;这是子应用vue2的页面&lt;/h2&gt;</span><br><span class="line">      &lt;micro-app name=&#x27;vue2Page&#x27;</span><br><span class="line">                 :url=&#x27;url&#x27;</span><br><span class="line">                 baseroute=&#x27;/vue2&#x27;</span><br><span class="line">                 :data=&quot;sendData&quot;</span><br><span class="line">      &gt;&lt;/micro-app&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;vue2Page&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      url:&#x27;//localhost:3000/vue2/&#x27;,</span><br><span class="line">      //基座 向子应用发送信息 方式一</span><br><span class="line">      sendData:&#123;</span><br><span class="line">        dec:&quot;这个是父基座发送数据&quot;,</span><br><span class="line">        title:&quot;打印出来看看吧&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们的基座就搭建好了，只要按照你需要的配置路由等。至于数据交互之类的可以后期需要的时候再配置</p><h3 id="子系统配置"><a href="#子系统配置" class="headerlink" title="子系统配置"></a>子系统配置</h3><blockquote><p>下面这些是我们在子系统开发中需要配置的</p></blockquote><ol><li>跨域支持</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue.config.js || --&gt;</span><br><span class="line"> publicPath: &#x27;/vue2&#x27;, // 配置子路径地址</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: 3000, // 此端口号必须和基座中的micro-app中配置的url地址一致</span><br><span class="line">        headers: &#123;</span><br><span class="line">            &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27; // 开启跨域</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>资源路径自动补全<ol><li>步骤 1: 在子应用 src 目录下创建名称为 public-path.js 的文件，并添加如下内容</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// __MICRO_APP_ENVIRONMENT__和__MICRO_APP_PUBLIC_PATH__是由micro-app注入的全局变量</span><br><span class="line">if (window.__MICRO_APP_ENVIRONMENT__) &#123;</span><br><span class="line">  // eslint-disable-next-line</span><br><span class="line">  __webpack_public_path__ = window.__MICRO_APP_PUBLIC_PATH__</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>步骤 2: 在子应用入口文件的最顶部引入 public-path.js</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// entry</span><br><span class="line">import &#x27;./public-path&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就能渲染出来了，这样不管多少个项目都能独立开发独立部署，不限制技术栈了，只要将基座维护好有无限的可能。</p>]]></content>
      
      
      <categories>
          
          <category> 微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite-配置</title>
      <link href="/2023/04/12/vite-%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/04/12/vite-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="vite-自称是下一代前端构建工具不单单适用于-vue-也适用于-react"><a href="#vite-自称是下一代前端构建工具不单单适用于-vue-也适用于-react" class="headerlink" title="vite 自称是下一代前端构建工具不单单适用于 vue 也适用于 react"></a>vite 自称是下一代前端构建工具不单单适用于 vue 也适用于 react</h3><blockquote><p>在笔者自身适用来看还是非常不错的相比俩年前还是完善不少。速度确实快有发展潜力可以学习一下直接上代码 vite.config.ts</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">// defineConfig起到提示作用</span><br><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import AutoImport from &quot;unplugin-auto-import/vite&quot;;</span><br><span class="line">import Components from &quot;unplugin-vue-components/vite&quot;;</span><br><span class="line">import &#123; ElementPlusResolver &#125; from &quot;unplugin-vue-components/resolvers&quot;;</span><br><span class="line">import path from &quot;path&quot;;</span><br><span class="line">const resolve = (dir) =&gt; path.resolve(__dirname, dir);</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  // ## 公共配置</span><br><span class="line">  // 项目根目录</span><br><span class="line">  root:process.cwd(),</span><br><span class="line">  // 开发或生成的基础路径</span><br><span class="line">  base:&#x27;./&#x27;,</span><br><span class="line">  // 环境</span><br><span class="line">  mode:&quot;development&quot;,</span><br><span class="line">  // 静态文件夹</span><br><span class="line">  publicDir:&#x27;public&#x27;,</span><br><span class="line">  // 缓存文件的目录</span><br><span class="line">  cacheDir:&#x27;node_modules/.vite&#x27;,</span><br><span class="line">  // 配置别名</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    //配置根路径别名： import(&#x27;@/pages/login/login.vue&#x27;)</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &quot;@&quot;: path.resolve(__dirname, &quot;src&quot;),</span><br><span class="line">      // 注意一定不要随意命名，a b c这样的，项目的目录也不能为关键字保留字！！</span><br><span class="line">      &quot;comp&quot;: resolve(__dirname, &quot;src/components&quot;),</span><br><span class="line">      // 配置图片要这样引用</span><br><span class="line">      &quot;/img&quot;: &quot;./src/assets&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    dedupe: [], // 强制 Vite 始终将列出的依赖项解析为同一副本</span><br><span class="line">    conditions: [], // 解决程序包中 情景导出 时的其他允许条件</span><br><span class="line">    mainFields: [], // 解析包入口点尝试的字段列表</span><br><span class="line">    extensions: [&#x27;.mjs&#x27;, &#x27;.js&#x27;, &#x27;.ts&#x27;, &#x27;.jsx&#x27;, &#x27;.tsx&#x27;, &#x27;.json&#x27;], // 导入时想要忽略的扩展名列表</span><br><span class="line">    preserveSymlinks: false, // 启用此选项会使 Vite 通过原始文件路径确定文件身份</span><br><span class="line">  &#125;,</span><br><span class="line">  // 插件</span><br><span class="line">  plugins: [vue(),  //引入vue 插件</span><br><span class="line">  AutoImport(&#123;</span><br><span class="line">    imports: [&quot;vue&quot;],</span><br><span class="line">    dts: &quot;src/auto-import.d.ts&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">  //plus按需引入</span><br><span class="line">  AutoImport(&#123;</span><br><span class="line">    resolvers: [ElementPlusResolver()],</span><br><span class="line">  &#125;),</span><br><span class="line">  //plus按需引入</span><br><span class="line">  Components(&#123;</span><br><span class="line">    resolvers: [ElementPlusResolver()],</span><br><span class="line">  &#125;),],</span><br><span class="line">  // ## 打包配置</span><br><span class="line">  build:&#123;</span><br><span class="line">    // 设置打包构建的文件最终兼容的浏览器版本 modules是支持es模块的</span><br><span class="line">    target:&#x27;modules&#x27;,</span><br><span class="line">    // 性能优化  自动注入modulepreload-polyfill 资源在页面初始化之前预加载资源</span><br><span class="line">    modulePreload:&#123;</span><br><span class="line">      polyfill:true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 指定的输出路径</span><br><span class="line">    outDir:&#x27;dist&#x27;,</span><br><span class="line">    // 指定生成的静态资源文件夹路径</span><br><span class="line">    assetsDir:&#x27;assets&#x27;,</span><br><span class="line">    // 小于你设置值大小的导入或者引入资源文件会通过base64编码内联进去4096KB为默认值</span><br><span class="line">    assetsInlineLimit:4096,</span><br><span class="line">    // 启用或者禁用css拆分，如果禁用就会将css提取到一个css文件中 **注意：如果指定了lib cssCodeSplit默认为false</span><br><span class="line">    cssCodeSplit:true,</span><br><span class="line">    // 构建为库</span><br><span class="line">    lib:false,</span><br><span class="line">    // 构建打包成兼容浏览器的css</span><br><span class="line">    cssTarget:&#x27;modules&#x27;,</span><br><span class="line">    // 构建打包时是否生成source map 文件</span><br><span class="line">    sourcemap:true,</span><br><span class="line">    // rollup 配置</span><br><span class="line">    rollupOptions:&#123;&#125;,</span><br><span class="line">    // 传递给 @rollup/plugin-commonjs 插件的选项。</span><br><span class="line">    commonjsOptions:&#123;&#125;,</span><br><span class="line">    // 传递给 @rollup/plugin-dynamic-import-vars 的选项。</span><br><span class="line">    dynamicImportVarsOptions:&#123;&#125;,</span><br><span class="line">    // 构建后会生成manifest.json文件</span><br><span class="line">    manifest:false,</span><br><span class="line">    // gzip压缩大小报告</span><br><span class="line">    reportCompressedSize:true,</span><br><span class="line">    // 触发chunk警告的大小设置kbs</span><br><span class="line">    chunkSizeWarningLimit:500</span><br><span class="line">    // 与minify一致</span><br><span class="line">    cssMinify:true,</span><br><span class="line">    // 使用terserOptions必须开启</span><br><span class="line">    minify:&quot;terser&quot;,</span><br><span class="line">    terserOptions:&#123;</span><br><span class="line">      compress:&#123;</span><br><span class="line">        // 打包生产环境时移除console</span><br><span class="line">        drop_console:true,</span><br><span class="line">        // 打包生产环境时移除debugger</span><br><span class="line">        drop_debugger:true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // ## 服务器配置</span><br><span class="line">  server:&#123;</span><br><span class="line">    // ip地址，0.0.0.0监听所有</span><br><span class="line">    host:&#x27;0.0.0.0&#x27;,</span><br><span class="line">    // 指定端口</span><br><span class="line">    port:8080,</span><br><span class="line">    // 端口被占用时直接退出</span><br><span class="line">    strictPort:true,</span><br><span class="line">    // 启动服务时自动在浏览器打开应用</span><br><span class="line">    open:true,</span><br><span class="line">    // 配置cors</span><br><span class="line">    cors:false,</span><br><span class="line">    // 配置headers</span><br><span class="line">    headers:&#123;&#125;,</span><br><span class="line">    //开启热更新</span><br><span class="line">    hmr:true,</span><br><span class="line">    // 代理</span><br><span class="line">    proxy:&#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://jsonplaceholder.typicode.com&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试</title>
      <link href="/2023/04/12/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/04/12/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="在面试的时候经常被问到你对性能优化有什么了解"><a href="#在面试的时候经常被问到你对性能优化有什么了解" class="headerlink" title="在面试的时候经常被问到你对性能优化有什么了解"></a>在面试的时候经常被问到你对性能优化有什么了解</h3><ol><li>你对你的页面性能真的了解过嘛，你真的知道如何测试嘛</li><li>今天为大家分享一个性能测试最简单的方法 lighthouse<br>2.1 用 chrome 浏览器打开你需要测试的网页<br>2.2 F12 选择 lighthouse 就会出现如图的界面<br><img src="/images/Lighthouse.png"><br>2.3 我们能看到 mode(模式) 我们使用默认的 Navigation(导航)就可以了<br>2.4 Device(设备)就按需选择是移动还是桌面<br>2.5 Cateories(类别)<br>Performance(性能)<br>Accessibility(无障碍功能)<br>Best practices(最佳做法)<br>SEO(SEO)<br>Progressive Web App(渐进式 web 应用)<br>2.6 点击 page load 分析网页加载情况<br>2.7 这样就将你的网页性能给测试出来了并且给出了相应的整改措施</li><li>对于我个人而言能按照 lighthouse 的性能报告给出的相应的整改措施而言就已经足够了</li></ol><h3 id="性能测试报告"><a href="#性能测试报告" class="headerlink" title="性能测试报告"></a>性能测试报告</h3><p><img src="/images/Lighthouse01.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-对象数组跟新</title>
      <link href="/2023/04/10/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E6%9B%B4%E6%96%B0/"/>
      <url>/2023/04/10/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-effect实现"><a href="#vue3源码手写-effect实现" class="headerlink" title="vue3源码手写-effect实现"></a>vue3源码手写-effect实现</h3><h6 id="1-packages-reactivity-src-effect-ts"><a href="#1-packages-reactivity-src-effect-ts" class="headerlink" title="1. packages\reactivity\src\effect.ts"></a>1. packages\reactivity\src\effect.ts</h6><blockquote><p>第一步在 packages\reactivity\src\effect.ts 创建effect文件，effect中创建trigger做更新处理</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, type, key?, value?, oldValue?</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取一下目标对象，有值那么说明目标对象有对应的依赖收集</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target);</span><br><span class="line">  <span class="comment">// 没有对应的依赖收集就直接retun</span></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 利用set集合特性防止有多个相同的改动重复执行</span></span><br><span class="line">  <span class="keyword">let</span> effectSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">effectAdd</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (effectAdd) &#123;</span><br><span class="line">      effectAdd.<span class="property">array</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是去重</span></span><br><span class="line">        effectSet.<span class="title function_">add</span>(element);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对数组进行特殊处理</span></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&quot;length&quot;</span> &amp;&amp; <span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">    depsMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">dep, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&quot;length&quot;</span> || key &gt; value) &#123;</span><br><span class="line">        <span class="comment">// depsMap.get(key) 这里是拿到对应的目标对象下面的属性下面收集的依赖</span></span><br><span class="line">        <span class="title function_">add</span>(dep);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// depsMap.get(key) 这里是拿到对应的目标对象下面的属性下面收集的依赖</span></span><br><span class="line">      <span class="title function_">add</span>(depsMap.<span class="title function_">get</span>(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数组 修改 索引</span></span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TriggerOpTypes</span>.<span class="property">ADD</span>:</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isIntegerKey</span>(key))&#123;</span><br><span class="line">                <span class="title function_">add</span>(depsMap.<span class="title function_">get</span>(<span class="string">&#x27;length&#x27;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 执行对应的依赖</span></span><br><span class="line">  effectSet.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effect: any</span>) =&gt;</span> <span class="title function_">effect</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-baseHandlers-依赖收集的地方进行更新操作"><a href="#2-baseHandlers-依赖收集的地方进行更新操作" class="headerlink" title="2. baseHandlers 依赖收集的地方进行更新操作"></a>2. baseHandlers 依赖收集的地方进行更新操作</h6><blockquote><p>第二步在 baseHandlers 依赖收集的地方进行更新操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  代理中的set函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target,key,value,receiver</span>)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 判断是数组还是对 是添加值还是修改</span></span><br><span class="line">        <span class="keyword">const</span> oldValue = target[key]</span><br><span class="line">        <span class="comment">// 判断 是不是数组 值是不是正数 是不是新增 或者 对象的值有没有</span></span><br><span class="line">        <span class="keyword">let</span> haskey = <span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isIntegerKey</span>(key) ? <span class="title class_">Number</span>(key) &lt;target.<span class="property">length</span> :<span class="title function_">hasOwn</span>(target,key)</span><br><span class="line">        <span class="comment">// 通过映射拿到新的值</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">        <span class="comment">// 没有对应的值 新增   </span></span><br><span class="line">        <span class="keyword">if</span>(!haskey)&#123;</span><br><span class="line">                <span class="title function_">trigger</span>(target,<span class="title class_">TriggerOpTypes</span>.<span class="property">ADD</span>,key,value)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 有对应的值就是修改 ，修改的时候要判断是否一致。新值老值</span></span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_">hasChange</span>(value,oldValue))&#123;</span><br><span class="line">                    <span class="comment">// 不一致的时候修改传入新值 value 老值 oldValue</span></span><br><span class="line">                    <span class="title function_">trigger</span>(target,<span class="title class_">TriggerOpTypes</span>.<span class="property">SET</span>,key,value,oldValue)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="创建-operations-ts-文件定义参数"><a href="#创建-operations-ts-文件定义参数" class="headerlink" title="创建 operations.ts 文件定义参数"></a>创建 operations.ts 文件定义参数</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export const enum TrackOpTypes &#123;</span><br><span class="line">    GET = &#x27;get&#x27;,</span><br><span class="line">    HAS = &#x27;has&#x27;,</span><br><span class="line">    ITERATE = &#x27;iterate&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  export const enum TriggerOpTypes &#123;</span><br><span class="line">    SET = &#x27;set&#x27;,</span><br><span class="line">    ADD = &#x27;add&#x27;,</span><br><span class="line">    DELETE = &#x27;delete&#x27;,</span><br><span class="line">    CLEAR = &#x27;clear&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果需要源码请访问<a href="https://github.com/843378894/mini-vue3">https://github.com/843378894/mini-vue3</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染原理</title>
      <link href="/2023/04/10/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
      <url>/2023/04/10/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器渲染页面的原理及流程"><a href="#浏览器渲染页面的原理及流程" class="headerlink" title="浏览器渲染页面的原理及流程"></a>浏览器渲染页面的原理及流程</h3><ol><li>浏览器将域名通过网络通信从服务器拿到 html 文件</li><li>根据 html 文件构建 DOM 树和 CSSOM 树，构建 DOM 树期间遇到 js，阻塞 DOM 树和 CSSOM 树的构建，优先加载 js 文件，加载完毕，再继续构建 DOM 树和 CSSOM 树</li><li>构建渲染树（Render Tree）</li><li>页面的重绘与重排（也叫回流）。页面渲染完成后，如果 js 操作了 DOM 节点，根据 JS 对 DOM 操作动作的大小激进型重绘或者重排</li></ol><h4 id="url-输入到-HTML-渲染完成都做了什么"><a href="#url-输入到-HTML-渲染完成都做了什么" class="headerlink" title="url 输入到 HTML 渲染完成都做了什么"></a>url 输入到 HTML 渲染完成都做了什么</h4><ol><li><p>解析 URL</p><p>1.1 首先会对 url 进行解析，获取所需要的传输协议和请求资源地址<br>1.2 如果输入的 url 中的协议活主机名不合法，将会把地址栏中输入的内容传递给搜索引擎<br>1.3 如果协议和主机名没有问题，浏览器会检查 url 中是否有非法字符，会选择是否对其进行转义</p></li><li><p>缓存加载<br>2.1 浏览器会从缓存中获取请求的资源<br>2.2 如果请求的资源存在缓存中没有失效，就直接返回缓存数据，否则向服务器发起新的请求。</p></li><li><p>DNS 解析<br>3.1 获取 URL 中域名 ip 地址<br>3.2 先判断本地是否有该域名的 ip 地址的缓存<br>3.2.1 如果有就使用缓存的数据；<br>3.2.2 如果没有则向本地 DNS 服务器发起请求；<br>3.3 本地 DNS 服务器获取 ip 地址优先使用本地缓存，如果没有缓存数据就向服务器发起请求</p></li><li><p>获取 MAC 地址，数据传输需要知道目的主机 MAC 地址</p></li><li><p>TCP 链接（3 次握手）<br>5.1 确认客户端与服务器的接受与发送能力，与目标服务器建立链接</p></li><li><p>HTTPS 握手</p></li><li><p>发送 http 请求返回数据 HTML</p></li><li><p>解析 HTML 渲染</p></li><li><p>TCP 断开链接（4 次挥手）</p></li></ol><h3 id="渲染过程"><a href="#渲染过程" class="headerlink" title="渲染过程"></a>渲染过程</h3><ol><li>渲染流程</li></ol><p><img src="/images/render.png"><br>渲染流程的主要四个步骤<br>1.1 解析 HTML 生成 DOM 树<br>1.2 解析 css 生成 CSSOM 树<br>1.3 根据 DOM 和 CSSOM 树构建 Render 树<br>1.4 布局 render 树<br>1.5 绘制 render 树</p><ol><li><p>渲染细节<br>2.1 生成 DOM 树<br>DOM 树的构建过程是一个深度遍历过程，当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。DOM 树的节点就时 document 对象<br>DOM 树的生成过程中可能被 css 和 js 的加载执行阻塞<br>2.2 生成 CSSOM 树<br>DOM 树生成的同时会生成样式结构体 CSSOM 树，<br>2.3 生成 Render 树<br>根据 CSSOM 树和 DOM 树构造渲染树，渲染树包含颜色尺寸，render 树是用于显示，，那些不可见元素不在 render 树中出现<br>2.4 布局<br>根据 render 树的样式规则，浏览器会根据这些信息进行布局，从上到下从根节点开始画<br>2.5 绘制<br>渲染引擎会遍历 render 树，并且调用 render 的 paint（）方法进行绘制<br>这样一个完整的页面就渲染出来了</p></li><li><p>重排(回流)与重绘<br>3.1 在样式的尺寸发生改变的时候就会引起浏览器的重排（回流）机制进行重新计算渲染<br>3.2 在颜色等不涉及尺寸的改变时会引起浏览器的重绘机制重新绘制页面</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渲染原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目搭建-Commit 强制校验</title>
      <link href="/2023/04/07/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-Commit%E5%BC%BA%E5%88%B6%E6%A0%A1%E9%AA%8C/"/>
      <url>/2023/04/07/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA-Commit%E5%BC%BA%E5%88%B6%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<pre><code>1. husky安装  npm I -D husky2. 执行 npx husky install 自动创建 .husky/目录，并且指定该目录为git hooks 所在目录，3. 添加 git hooks，语法：husky add \&lt;file\&gt; \[cmd\] 运行命令 npx husky add .husky/pre-commit &quot;git add . &quot; 执行成功之后.husky 目录下会出现一个pre-commit的shell脚本文件，在执行commit之前会执行该脚本4. 添加commit-msg校验，安装commit规范校验commitlint 执行 npm install --save-dev @commitlint/config-conventional @commiylint/cli5. 在根目录下，创建文件 commitlint.config.js 配置相关的commit规范定义6. 绑定检验,执行命令npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;来校验我们 commit 时添加的备注信息是否符合规范,执行成功之后 .husky 目录下面会有一个名为 commit-msg的 shell 脚本文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 强制校验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three-入门学习-3D房屋全景实现</title>
      <link href="/2023/04/06/three-3D%E6%88%BF%E5%B1%8B%E5%85%A8%E6%99%AF%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/06/three-3D%E6%88%BF%E5%B1%8B%E5%85%A8%E6%99%AF%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="three-3D-房屋全景实现"><a href="#three-3D-房屋全景实现" class="headerlink" title="three-3D 房屋全景实现"></a>three-3D 房屋全景实现</h3><h6 id="1-安装-three-js"><a href="#1-安装-three-js" class="headerlink" title="1. 安装 three.js"></a>1. 安装 three.js</h6><blockquote><p>根据之前的粗略学习，突发想做个全景图网上学习一波</p></blockquote><blockquote><blockquote><p>3D 效果是前端绕不过的发展趋势，未来会有更多的 3D 场景的需要。</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    3D</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three-box-one&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> house <span class="keyword">from</span> <span class="string">&#x27;./assets/panorama-house.webp&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> <span class="attr">scene</span>: <span class="variable constant_">THREE</span>.<span class="property">Scene</span>, mesh;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">interface <span class="title class_">DataType</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">id</span>: <span class="title class_">HTMLElement</span> | any;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">domW</span>: <span class="title class_">Number</span> | any;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">domH</span>: <span class="title class_">Number</span> | any;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">camera</span>: <span class="variable constant_">THREE</span>.<span class="property">PerspectiveCamera</span> | any;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">renderer</span>: <span class="variable constant_">THREE</span>.<span class="property">WebGLRenderer</span> | any;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mesh</span>: <span class="variable constant_">THREE</span>.<span class="property">Mesh</span> | any;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">material</span>: <span class="variable constant_">THREE</span>.<span class="property">MeshBasicMaterial</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// controls?: OrbitControls | any;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownMouseX</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownMouseY</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">lon</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">lat</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownLon</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownLat</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">phi</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">theta</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">isUserInteracting</span>: <span class="title class_">Boolean</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="attr">dataType</span>: <span class="title class_">DataType</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">id</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">domW</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">domH</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">camera</span>: <span class="variable constant_">THREE</span>.<span class="property">PerspectiveCamera</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">renderer</span>: <span class="variable constant_">THREE</span>.<span class="property">WebGLRenderer</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">mesh</span>: <span class="variable constant_">THREE</span>.<span class="property">Mesh</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">material</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// controls: OrbitControls,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownMouseX</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownMouseY</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">lon</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">lat</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownLon</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">onMouseDownLat</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">phi</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">theta</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">isUserInteracting</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(dataType);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">id</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;three&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">domW</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">domH</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">init</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 构建器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 创建近大远小（透视投影）相机</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="number">75</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">domW</span> / data.<span class="property">domH</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="number">0.01</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="number">1100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 返回一个能够表示当前摄像机所正视(拍摄)的世界空间方向的Vector3对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="property">target</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// data.camera.position.z = 5;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 创建渲染函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">renderer</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="comment">// 模型抗锯齿</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">alpha</span>: <span class="literal">true</span>, <span class="comment">// 开启背景透明</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">renderer</span>.<span class="title function_">setClearColor</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0x000000</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">renderer</span>.<span class="title function_">setPixelRatio</span>(<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 设置渲染场景大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">renderer</span>.<span class="title function_">setSize</span>(data.<span class="property">domW</span>, data.<span class="property">domH</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 将场景添加到div标签</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">id</span>.<span class="title function_">appendChild</span>(data.<span class="property">renderer</span>.<span class="property">domElement</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 添加灯光</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">addLight</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 添加场景辅助线</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">axisHelper</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 添加球体设置材质</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">initSphereGeometry</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 添加事件监听器，配合鼠标做不同的位置变换</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">addEventListenFn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 刷帧渲染动画</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">animate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 响应屏幕改变大小函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">onWindowResize</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">addLight</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 设置环境光 环境光会均匀的照亮场景中的所有物体。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> ambientLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="string">&#x27;#ffffff&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  scene.<span class="title function_">add</span>(ambientLight);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 设置平行光</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> light = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DirectionalLight</span>(<span class="string">&#x27;#ffffff&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  scene.<span class="title function_">add</span>(light);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 设置点光源</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> pointLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointLight</span>(<span class="string">&#x27;#ffffff&#x27;</span>, <span class="number">0.1</span>, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  pointLight.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  scene.<span class="title function_">add</span>(pointLight);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">axisHelper</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="attr">axes</span>: <span class="variable constant_">THREE</span>.<span class="property">AxesHelper</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxesHelper</span>(<span class="number">800</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  scene.<span class="title function_">add</span>(axes);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">initSphereGeometry</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 创建半径500的球体 （球缓冲几何体）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">500</span>, <span class="number">32</span>, <span class="number">16</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  geometry.<span class="title function_">scale</span>(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 创建材质获取材质图片鱼眼图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">material</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 加载墙壁图纸 自己网上找一个全景图片就行了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">map</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(house),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, data.<span class="property">material</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 将球体添加到场景</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  scene.<span class="title function_">add</span>(mesh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">addEventListenFn</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="attr">_this</span>: any = data;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 鼠标按下获取鼠标xy坐标转换成球体经纬度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, onPointerStart, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 鼠标移动计算变化后的球体经纬度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onPointerMove, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 鼠标抬起停止跟随</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, onPointerUp, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 鼠标滚轮放大缩小摄像机目标距离</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;wheel&#x27;</span>, onDocumentMouseWheel, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 移动端手指移上获取鼠标xy坐标转换成球体经纬度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, onPointerStart, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 移动端手指移动计算变化后的球体经纬度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, onPointerMove, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 移动端手指抬起停止跟随</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, onPointerUp, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 拖拽</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&#x27;dragover&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      e.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      e.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span> = <span class="string">&#x27;copy&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 拓拽停止设置body 半透明</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&#x27;dragenter&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0.5&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 拖拽离开回归透明度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&#x27;dragleave&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&#x27;drop&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      e.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 读取图片为二进制码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      reader.<span class="title function_">addEventListener</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;load&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="function">(<span class="params">es: any</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 更新材质</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          _this.<span class="property">material</span>.<span class="property">map</span>.<span class="property">image</span>.<span class="property">src</span> = es.<span class="property">target</span>.<span class="property">result</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          _this.<span class="property">material</span>.<span class="property">needsUpdate</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      reader.<span class="title function_">readAsDataURL</span>(e.<span class="property">dataTransfer</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onPointerStart</span> = (<span class="params">e</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">isUserInteracting</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 获取鼠标x y 坐标</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> clientX = e.<span class="property">clientX</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> clientY = e.<span class="property">clientY</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">onMouseDownMouseX</span> = clientX;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">onMouseDownMouseY</span> = clientY;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 设置经纬度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">onMouseDownLon</span> = data.<span class="property">lon</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">onMouseDownLat</span> = data.<span class="property">lat</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onPointerMove</span> = (<span class="params">e</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">if</span> (data.<span class="property">isUserInteracting</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> clientX = e.<span class="property">clientX</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> clientY = e.<span class="property">clientY</span> || e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">lon</span> = (data.<span class="property">onMouseDownMouseX</span> - clientX) * <span class="number">0.1</span> + data.<span class="property">onMouseDownLon</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">lat</span> = (clientY - data.<span class="property">onMouseDownMouseY</span>) * <span class="number">0.1</span> + data.<span class="property">onMouseDownLat</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onPointerUp</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">isUserInteracting</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onDocumentMouseWheel</span> = (<span class="params">e</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> fov = data.<span class="property">camera</span>.<span class="property">fov</span> + e.<span class="property">deltaY</span> * <span class="number">0.05</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="property">fov</span> = <span class="variable constant_">THREE</span>.<span class="property">MathUtils</span>.<span class="title function_">clamp</span>(fov, <span class="number">10</span>, <span class="number">75</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="title function_">updateProjectionMatrix</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">animate</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 更新相机 旋转场景空间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">updateFn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">updateFn</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">if</span> (!data.<span class="property">isUserInteracting</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 经度每帧更新0.1 场景自动旋转起来</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">lon</span> += <span class="number">0.1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">lat</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(-<span class="number">85</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">85</span>, data.<span class="property">lat</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">phi</span> = <span class="variable constant_">THREE</span>.<span class="property">MathUtils</span>.<span class="title function_">degToRad</span>(<span class="number">90</span> - data.<span class="property">lat</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">theta</span> = <span class="variable constant_">THREE</span>.<span class="property">MathUtils</span>.<span class="title function_">degToRad</span>(data.<span class="property">lon</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 更新相机 目标 x y z 位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="property">target</span>.<span class="property">x</span> = <span class="number">500</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>(data.<span class="property">phi</span>) * <span class="title class_">Math</span>.<span class="title function_">cos</span>(data.<span class="property">theta</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="property">target</span>.<span class="property">y</span> = <span class="number">500</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(data.<span class="property">phi</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="property">target</span>.<span class="property">z</span> = <span class="number">500</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>(data.<span class="property">phi</span>) * <span class="title class_">Math</span>.<span class="title function_">sin</span>(data.<span class="property">theta</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 相机拍摄目标（始终拍摄这里）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">camera</span>.<span class="title function_">lookAt</span>(data.<span class="property">camera</span>.<span class="property">target</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  data.<span class="property">renderer</span>.<span class="title function_">render</span>(scene, data.<span class="property">camera</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">onWindowResize</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">domH</span> = data.<span class="property">id</span>.<span class="property">offsetHeight</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">domW</span> = data.<span class="property">id</span>.<span class="property">offsetWidth</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">camera</span>.<span class="property">aspect</span> = data.<span class="property">domW</span> / data.<span class="property">domH</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">camera</span>.<span class="title function_">updateProjectionMatrix</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    data.<span class="property">renderer</span>.<span class="title function_">setSize</span>(data.<span class="property">domW</span>, data.<span class="property">domH</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Three </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three-入门学习-简单的3D实现</title>
      <link href="/2023/04/06/three-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/06/three-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="three-入门学习"><a href="#three-入门学习" class="headerlink" title="three-入门学习"></a>three-入门学习</h3><h6 id="1-安装-three-js"><a href="#1-安装-three-js" class="headerlink" title="1. 安装 three.js"></a>1. 安装 three.js</h6><blockquote><p>npm install three 安装好之后复制如下代码就能跑起来</p><blockquote><p>3D 效果是前端绕不过的发展趋势，未来会有更多的 3D 场景的需要。</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建一个三维场景Scene 构造器，相当于你需要放东西的盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建一个相机 PerspectiveCamera 透明相机，相当于一个投影仪，投影出3D效果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// fov — 摄像机视锥体垂直视野角度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// aspect — 摄像机视锥体长宽比</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// near — 摄像机视锥体近端面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// far — 摄像机视锥体远端面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="number">75</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="number">0.1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="number">1000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建你的渲染器，用来渲染你定义的图形动画</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 设置渲染图形的大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 添加元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//  定义立方体图形</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 构建立方体的材质和颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0x00ff00</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 网格内的物体 构成定义的立方体图形，并且使用什么样的材质</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 放在环境中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">scene.<span class="title function_">add</span>(cube);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 坐标轴的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 频率刷新 切换的时候会停止</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">requestAnimationFrame</span>(animate);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 物体旋转的大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  cube.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">0.01</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  cube.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 图形渲染函数 传入场景和相机</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  renderer.<span class="title function_">render</span>(scene, camera);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">animate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.logo</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">6em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">1.5em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">will-change</span>: filter;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transition</span>: filter <span class="number">300ms</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">#646cffaa</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.logo</span><span class="selector-class">.vue</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">#42b883aa</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Three </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-effect实现</title>
      <link href="/2023/04/03/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-effect%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/03/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-effect%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-effect实现"><a href="#vue3源码手写-effect实现" class="headerlink" title="vue3源码手写-effect实现"></a>vue3源码手写-effect实现</h3><h6 id="1-packages-reactivity-src-effect-ts"><a href="#1-packages-reactivity-src-effect-ts" class="headerlink" title="1. packages\reactivity\src\effect.ts"></a>1. packages\reactivity\src\effect.ts</h6><blockquote><p>第一步在 packages\reactivity\src\effect.ts 创建effect文件，effect做的就是依赖收集对get set put等操作进行收集</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    reactive,</span><br><span class="line">    readonly,</span><br><span class="line">    shallowReactive,</span><br><span class="line">    shallowReadonly,</span><br><span class="line">  &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-reactive-实现"><a href="#2-reactive-实现" class="headerlink" title="2. reactive 实现"></a>2. reactive 实现</h6><blockquote><p>第二步在 对应目录下创建对应的文件（packages\reactivity\src\reactive.ts），内容看代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fun,options:any=&#123;&#125;</span>)&#123;</span><br><span class="line"><span class="keyword">const</span>  effect = <span class="title function_">creatReactEffect</span>(fun,options)</span><br><span class="line"><span class="comment">// 不是懒执行 直接执行</span></span><br><span class="line">    <span class="keyword">if</span>(!options?.<span class="property">lazy</span>)&#123;</span><br><span class="line">        <span class="title function_">effect</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  定义属性用作区分。每个属性都会有自己的uid</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"><span class="comment">// 储存当前的effect</span></span><br><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">creatReactEffect</span>(<span class="params">fun,options</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> effect = <span class="keyword">function</span> <span class="title function_">reactEffect</span>(<span class="params"></span>)&#123;</span><br><span class="line">        activeEffect=effect</span><br><span class="line">        <span class="title function_">fun</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    effect.<span class="property">id</span> = uid++; <span class="comment">//区分effect</span></span><br><span class="line">    effect.<span class="property">_isEffect</span> = <span class="literal">true</span><span class="comment">//区分effect 是不是响应式</span></span><br><span class="line">    effect.<span class="property">raw</span> = fun<span class="comment">//保存传进来的方法</span></span><br><span class="line">    effect.<span class="property">options</span> = options<span class="comment">//保存传进来的属性</span></span><br><span class="line">    <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖effect 在获取数据的时候触发get 收集effect</span></span><br><span class="line"><span class="keyword">let</span> targetMap= <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target,type,key</span>)&#123;</span><br><span class="line">    <span class="comment">// 是undefined则说明没有调用或者不是响应数据</span></span><br><span class="line">    <span class="keyword">if</span>(activeEffect === <span class="literal">undefined</span>) <span class="keyword">return</span> </span><br><span class="line">    <span class="comment">// 获取effect &#123;target:dep&#125;</span></span><br><span class="line">    <span class="keyword">let</span> depMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="keyword">if</span>(!depMap)&#123;</span><br><span class="line">        <span class="comment">// 没有 depMap 说明第一次调用</span></span><br><span class="line">        targetMap.<span class="title function_">set</span>(target,(depMap= <span class="keyword">new</span> <span class="title class_">Map</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有depMap 就要判断有没有收集属性依赖</span></span><br><span class="line">    <span class="keyword">let</span> dep = depMap.<span class="title function_">get</span>(key)</span><br><span class="line">    <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">        <span class="comment">// 没有收集属性依赖就要添加</span></span><br><span class="line">        depMap.<span class="title function_">set</span>(key,(dep= <span class="keyword">new</span> <span class="title class_">Set</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有属性要看看依赖收集没有</span></span><br><span class="line">    <span class="keyword">if</span>(!dep.<span class="title function_">has</span>(activeEffect))&#123;</span><br><span class="line">        <span class="comment">// 没有要添加</span></span><br><span class="line">        dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-reactive实现</title>
      <link href="/2023/03/22/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-reactive%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/03/22/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-reactive%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-reactive实现"><a href="#vue3源码手写-reactive实现" class="headerlink" title="vue3源码手写-reactive实现"></a>vue3源码手写-reactive实现</h3><h6 id="1-packages-reactivity-src-index-ts-按照源码该位置做入口，只做导入导出"><a href="#1-packages-reactivity-src-index-ts-按照源码该位置做入口，只做导入导出" class="headerlink" title="1. packages\reactivity\src\index.ts 按照源码该位置做入口，只做导入导出"></a>1. packages\reactivity\src\index.ts 按照源码该位置做入口，只做导入导出</h6><blockquote><p>第一步在 packages\reactivity\src\index.ts 下导入导出我们在reactive.ts的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    reactive,</span><br><span class="line">    readonly,</span><br><span class="line">    shallowReactive,</span><br><span class="line">    shallowReadonly,</span><br><span class="line">  &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-reactive-实现"><a href="#2-reactive-实现" class="headerlink" title="2. reactive 实现"></a>2. reactive 实现</h6><blockquote><p>第二步在 对应目录下创建对应的文件（packages\reactivity\src\reactive.ts），内容看代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// shared 中写的是公共代码 需要先npm run build 打包才能引入，build报错的话先执行yarn install 再build </span></span><br><span class="line"><span class="keyword">import</span> &#123; isObject&#125; <span class="keyword">from</span><span class="string">&#x27;@vue/shared&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactiveHandlers,shallowReactiveHandlers,readonlyHandlers,shallowReadonlyHandlers&#125; <span class="keyword">from</span> <span class="string">&#x27;./baseHandlers&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vue3核心方法实现</span></span><br><span class="line"><span class="comment"> * reactive  创建响应式数据</span></span><br><span class="line"><span class="comment"> * shallowReactive 第一层的响应式</span></span><br><span class="line"><span class="comment"> * readonly 只读方法</span></span><br><span class="line"><span class="comment"> * readonly浅层的只读</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">false</span>,reactiveHandlers)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">shallowReactive</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">false</span>,shallowReactiveHandlers)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">true</span>,readonlyHandlers)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">shallowReadonly</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">true</span>,shallowReadonlyHandlers)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * weakMap  相当于Map 但是key是对象 而且有自动垃圾回收</span></span><br><span class="line"><span class="comment"> * 使用weakMap 储存代理了的target是性能优化，防止已经代理过的数据多次代理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> reactiveMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">const</span> readonlyMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高阶函数根据入参处理不同的业务群相同业务又能共用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 代理核心方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@target</span> 目标对象，创建响应式传入的对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@isReadonly</span> 是否只读</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@baseHandlers</span>  代理捕获核心  相当于Objeact 的get set 等捕获设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span>   <span class="title function_">createReactObj</span>(<span class="params">target,isReadonly,baseHandlers</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">isObject</span>(target))&#123;</span><br><span class="line">        <span class="comment">// 如果不是对象就直接返回 proxy只能代理对象</span></span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据是否只读来区分使用map集合储存</span></span><br><span class="line">    <span class="keyword">const</span> proxymap = isReadonly ? readonlyMap : reactiveMap</span><br><span class="line">    <span class="comment">// 取一下数据看集合中是否有该对象</span></span><br><span class="line">    <span class="keyword">const</span> proxyEs = proxymap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="comment">// 在集合中表明已经代理过了，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(proxyEs)&#123;</span><br><span class="line">        <span class="keyword">return</span> proxyEs</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,baseHandlers)</span><br><span class="line">    proxymap.<span class="title function_">set</span>(target,proxy)</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-baseHandlers-代理捕获器对象书写"><a href="#3-baseHandlers-代理捕获器对象书写" class="headerlink" title="3. baseHandlers 代理捕获器对象书写"></a>3. baseHandlers 代理捕获器对象书写</h6><blockquote><p>第三步 先对应目录下创建文件 （packages\reactivity\src\baseHandlers.ts）。实现看代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/shared&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, readonly &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该文件写的是代理的捕获配置对象不了解的话看一下ES6的Proxy ;new Proxy(target,&#123;get:function,set:function,delete:function&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 注意这里是对象不是方法 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> get = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>()</span><br><span class="line"><span class="keyword">const</span> shallowGet = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> readonlyGet = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> shallowReadonlyGet = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createSetter</span>()</span><br><span class="line"><span class="keyword">const</span> shallowSet =<span class="comment">/*#__PURE__*/</span> <span class="title function_">createSetter</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  代理中的set函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target,key,value,receiver</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params">isReadonly=<span class="literal">false</span>,shallow=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target,key,receiver</span>)&#123;</span><br><span class="line">        <span class="comment">// Reflect.get 相当于target[key] 好处是这个方法不会直接操作原对象&#123;a:&#123;b:&#123;&#125;&#125;&#125; res = &#123;b:&#123;&#125;&#125;</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">        <span class="keyword">if</span>(!isReadonly)&#123;</span><br><span class="line">            <span class="comment">// 不是只读操作 要做依赖收集</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shallow)&#123;</span><br><span class="line">            <span class="comment">//  浅层代理直接返回 之前在reactve中已经代理过一次了</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">isObject</span>(res))&#123;</span><br><span class="line">            <span class="comment">// 这里判断那到的value还是对象 我们在外面使用了 target.a 会触发get 方法走进createGetter 现在的res = &#123;b:&#123;&#125;&#125;</span></span><br><span class="line">            <span class="comment">// 递归调用代理方法</span></span><br><span class="line">            <span class="comment">// 遇到的面试题:为什么使用proxy性能根据好，因为Objeact.definepropty 上来就是递归处理，proxy是懒代理只有在调用的时候才会去递归代理</span></span><br><span class="line">            <span class="keyword">return</span> isReadonly ? <span class="title function_">readonly</span>(res) : <span class="title function_">reactive</span>(res)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reactiveHandlers =&#123;</span><br><span class="line">    get,</span><br><span class="line">    set</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowReactiveHandlers =&#123;</span><br><span class="line">    <span class="attr">get</span>:shallowGet,</span><br><span class="line">    <span class="attr">set</span>:shallowSet</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readonlyHandlers =&#123;</span><br><span class="line">    <span class="attr">get</span>:readonlyGet,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="comment">// readonly 的响应式对象不可以修改值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Set operation on key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>,</span><br><span class="line">          target</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowReadonlyHandlers =&#123;</span><br><span class="line">    <span class="attr">get</span>:shallowReadonlyGet,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="comment">// readonly 的响应式对象不可以修改值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Set operation on key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>,</span><br><span class="line">          target</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们才开了个头，让我们慢慢的一起完善把。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-环境搭建</title>
      <link href="/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-环境搭建"><a href="#vue3源码手写-环境搭建" class="headerlink" title="vue3源码手写-环境搭建"></a>vue3源码手写-环境搭建</h3><blockquote><p>工作中开始正式使用vue3，既然使用了就看看源码手写一个mini版。今天时间有限先从环境搭建开始，那么请往下看</p></blockquote><h6 id="1-rollup打包monorepo"><a href="#1-rollup打包monorepo" class="headerlink" title="1. rollup打包monorepo"></a>1. rollup打包monorepo</h6><blockquote><p>在我们查看源码文件的时候你会发现使用的是rollup打包monorepo。这样的方式有什么好处呢。能够让每个小的包能独立打包运行。也能整体打包运行，vue3源码的所有内容堵在packages文件夹下面，没包都是独立可打包运行的。</p></blockquote><h6 id="2-创建文件夹初始化文件"><a href="#2-创建文件夹初始化文件" class="headerlink" title="2. 创建文件夹初始化文件"></a>2. 创建文件夹初始化文件</h6><blockquote><ol><li>创建一个my-mini-vue3文件</li><li>进入到文件打开终端运行初始化命令， yarn init -y</li><li>命令运行完之后会生成package.json 文件</li></ol></blockquote><h6 id="3-依赖下载"><a href="#3-依赖下载" class="headerlink" title="3. 依赖下载"></a>3. 依赖下载</h6><blockquote><ol><li>下载ts，运行 yarn add typescript -D -W</li><li>生成ts配置文件 运行 npx tsc –init()</li><li>安装我们打包需要的依赖运行 yarn add rollup rollup-plugin-typescript2 @rollup&#x2F;plugin-node-resolve @rollup&#x2F;plugin-json execa -D -W</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">       &quot;@rollup/plugin-json&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">       &quot;@rollup/plugin-node-resolve&quot;: &quot;^15.0.1&quot;,</span><br><span class="line">       &quot;execa&quot;: &quot;^7.1.1&quot;,</span><br><span class="line">       &quot;rollup&quot;: &quot;^3.19.1&quot;,</span><br><span class="line">       &quot;rollup-plugin-typescript2&quot;: &quot;^0.34.1&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   @rollup/plugin-node-resolve 插件允许我们加载第三方模块</span><br><span class="line">   @rollup/plugin-json 支持导入json，没有 json 插件的支持我们在导入 json 文件时会报错</span><br><span class="line">   rollup-plugin-typescript2  typescript的差距 配合tsconfig.json</span><br><span class="line">   execa 插件将它们转换为ES6版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>好了今天环境已经搭建好了，明天来写打包配置的东西，欢迎大家指点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-打包配置</title>
      <link href="/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-打包配置"><a href="#vue3源码手写-打包配置" class="headerlink" title="vue3源码手写-打包配置"></a>vue3源码手写-打包配置</h3><h6 id="文件夹创建"><a href="#文件夹创建" class="headerlink" title="文件夹创建"></a>文件夹创建</h6><blockquote><p>在packages文件夹下面创建reactivity和shared文件夹，初始化创建对应的package.json并且创建src文件夹下面再创建一个index.tS文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reactivity -&gt; package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  打包更具这个名称生成文件在node_modules中</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@vue/reactivity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">    <span class="comment">// 打包生成的文件类型格式打包后能在dist文件中体现</span></span><br><span class="line">    <span class="string">&quot;buildOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;vueReactivity&quot;</span>,</span><br><span class="line">        <span class="string">&quot;formats&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;esm-bundler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;global&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shared -&gt; package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  打包更具这个名称生成文件在node_modules中</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@vue/shared&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">    <span class="comment">// 打包生成的文件类型格式打包后能在dist文件中体现</span></span><br><span class="line">    <span class="string">&quot;buildOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;vueShared&quot;</span>,</span><br><span class="line">        <span class="string">&quot;formats&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;esm-bundler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cjs&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在写源码之前我们要把项目搭建好，上次我们搭建了环境，那么解下来就是对项目进行打包配置。vue3是如何能做到每个文件独立运行也能打包在一块呢。</p></blockquote><h6 id="1-我们先对package-json动手"><a href="#1-我们先对package-json动手" class="headerlink" title="1. 我们先对package.json动手"></a>1. 我们先对package.json动手</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,<span class="comment">//表示这是一个私有项目，不会被 publish 到 npm库</span></span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,<span class="comment">// 这里是开启ES6模块，vue3不支持commonjs。你可以先不管他，等你在引入文件操作文件的时候会提醒你</span></span><br><span class="line"><span class="string">&quot;workspaces&quot;</span>: [<span class="comment">//简单讲就是将每个项目的 node_modules 都提升到根目录的 node_modules 中，形成多个项目复用同一套依赖包效果。</span></span><br><span class="line">    <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">],</span><br><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;<span class="comment">//书写脚本</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;node scripts/build.js&quot;</span>, <span class="comment">// 打包脚本</span></span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;node scripts/dev.js&quot;</span> <span class="comment">// 打包dev环境</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h6 id="2-在我们配置好了package-json-脚本之后我们要在根目录下面创建scripts文件夹和build-js与dev-js这俩个脚本文件"><a href="#2-在我们配置好了package-json-脚本之后我们要在根目录下面创建scripts文件夹和build-js与dev-js这俩个脚本文件" class="headerlink" title="2. 在我们配置好了package.json 脚本之后我们要在根目录下面创建scripts文件夹和build.js与dev.js这俩个脚本文件"></a>2. 在我们配置好了package.json 脚本之后我们要在根目录下面创建scripts文件夹和build.js与dev.js这俩个脚本文件</h6><h6 id="3-我们先对build-js书写打包时所需要执行的代码"><a href="#3-我们先对build-js书写打包时所需要执行的代码" class="headerlink" title="3. 我们先对build.js书写打包时所需要执行的代码"></a>3. 我们先对build.js书写打包时所需要执行的代码</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  编辑打包设置文件 monerepo</span></span><br><span class="line"><span class="comment">// node 内置文件读写方法</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; execa &#125; <span class="keyword">from</span> <span class="string">&quot;execa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  fs.readdirSync 读取对应文件夹下面的目录</span></span><br><span class="line"><span class="keyword">const</span> dirs = fs.<span class="title function_">readdirSync</span>(<span class="string">&quot;packages&quot;</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 对应路径下的文件是否是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (!fs.<span class="title function_">statSync</span>(<span class="string">`packages/<span class="subst">$&#123;p&#125;</span>`</span>).<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 对所有的文件进行遍历并行执行打包动作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runParallel</span> = (<span class="params">targets, buildFn</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> target <span class="keyword">of</span> targets) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(<span class="title function_">buildFn</span>(target))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打包核心调用execa执行 rollup 配置打包</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">build</span> = <span class="keyword">async</span>(<span class="params">pkg</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里执行完打包结束</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">execa</span>(<span class="string">&#x27;rollup&#x27;</span>, [<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--environment&#x27;</span>, <span class="string">`TARGET:<span class="subst">$&#123;pkg&#125;</span>`</span>], &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用打包函数</span></span><br><span class="line"><span class="title function_">runParallel</span>(dirs, build)</span><br></pre></td></tr></table></figure><h6 id="脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup-config-js文件，在根目录下创建。"><a href="#脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup-config-js文件，在根目录下创建。" class="headerlink" title="脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup.config.js文件，在根目录下创建。"></a>脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup.config.js文件，在根目录下创建。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解析ts 插件</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span></span><br><span class="line"><span class="comment">// 解下json的插件</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-json&#x27;</span></span><br><span class="line"><span class="comment">// 解析第三方插件</span></span><br><span class="line"><span class="keyword">import</span> resolvePlugin <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="comment">// 创建 require 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRequire &#125; <span class="keyword">from</span> <span class="string">&#x27;node:module&#x27;</span></span><br><span class="line"><span class="comment">// 获取更目录的</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"><span class="comment">// 获取path 方法</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">require</span> = <span class="title function_">createRequire</span>(</span><br><span class="line">    <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br><span class="line"><span class="keyword">const</span> __dirname = <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">    <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取文件路径</span></span><br><span class="line"><span class="keyword">const</span> packagesDir = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;packages&#x27;</span>)</span><br><span class="line">    <span class="comment">//  获取需要打包的包</span></span><br><span class="line"><span class="keyword">const</span> packageDir = path.<span class="title function_">resolve</span>(packagesDir, process.<span class="property">env</span>.<span class="property">TARGET</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取每个包的配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = p =&gt; path.<span class="title function_">resolve</span>(packageDir, p)</span><br><span class="line">    <span class="comment">// 获取每个包的 package.json</span></span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="title function_">resolve</span>(<span class="string">`package.json`</span>))</span><br><span class="line">    <span class="comment">//  取出包名</span></span><br><span class="line"><span class="keyword">const</span> name = path.<span class="title function_">basename</span>(packageDir)</span><br><span class="line">    <span class="comment">//  创建格式对应表</span></span><br><span class="line"><span class="keyword">const</span> outputOpions = &#123;</span><br><span class="line">    <span class="string">&quot;esm-bundler&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="title function_">resolve</span>(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.esm-bundler.js`</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;es&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;cjs&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="title function_">resolve</span>(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.cjs.js`</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;global&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="title function_">resolve</span>(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.global.js`</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;iife&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取每个包下面设定的buildOptions格式</span></span><br><span class="line"><span class="keyword">const</span> options = pkg.<span class="property">buildOptions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置打包函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createConfig</span>(<span class="params">format, output</span>) &#123;</span><br><span class="line">    <span class="comment">//  进行打包</span></span><br><span class="line">    output.<span class="property">name</span> = options.<span class="property">name</span></span><br><span class="line">    output.<span class="property">sourcemap</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//  生成rollup配置</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/index.ts&quot;</span>), <span class="comment">//导入</span></span><br><span class="line">        <span class="comment">// 打包配置</span></span><br><span class="line">        output,</span><br><span class="line">        <span class="comment">// 这里是插件的调用</span></span><br><span class="line">        <span class="title class_">Plugin</span>: [</span><br><span class="line">            <span class="title function_">json</span>(),</span><br><span class="line">            <span class="title function_">ts</span>(&#123;</span><br><span class="line">                <span class="attr">tsconfig</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;tsconfig.json&#x27;</span>)</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="title function_">resolvePlugin</span>()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  注意打包结束的时候一定要retun对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> options.<span class="property">formats</span>.<span class="title function_">map</span>(<span class="function"><span class="params">format</span> =&gt;</span> <span class="title function_">createConfig</span>(format, outputOpions[format]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上面的代码就是打包配置，rollup打包工具会根据你的打包进行</p></blockquote><h6 id="tsconfig文件修改"><a href="#tsconfig文件修改" class="headerlink" title="tsconfig文件修改"></a>tsconfig文件修改</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="comment">// 需要更改不支持ES5</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,                                </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要更改不支持ES5</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,                                <span class="comment">/* Specify what module code is generated. */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,                             <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. </span></span><br><span class="line"><span class="comment">    &quot;forceConsistentCasingInFileNames&quot;: true,            /* Ensure that casing is correct in imports. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    不使用严格模式  个人选择</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,                                      <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">  </span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 下面这些是文件路径配置，在引用别的包的时候TS检索不会报错</span></span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@vue/*&quot;</span>: [<span class="string">&quot;packages/*/src&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="dev-js-脚本编写"><a href="#dev-js-脚本编写" class="headerlink" title="dev.js 脚本编写"></a>dev.js 脚本编写</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  编辑打包设置文件 monerepo</span></span><br><span class="line"><span class="comment">// node 内置文件读写方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; execa &#125; <span class="keyword">from</span> <span class="string">&quot;execa&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">build</span> = <span class="keyword">async</span>(<span class="params">pkg</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">//  -cw 监听 相当于热跟新</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">execa</span>(<span class="string">&#x27;rollup&#x27;</span>, [<span class="string">&#x27;-cw&#x27;</span>, <span class="string">&#x27;--environment&#x27;</span>, <span class="string">`TARGET:<span class="subst">$&#123;pkg&#125;</span>`</span>], &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  打包函数</span></span><br><span class="line"><span class="title function_">build</span>(<span class="string">&quot;reactivity&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个是打包配置文件，进行到这里就已经能将我们需要写的东西编译出来。后续文章开始我们进行源码书写，感兴趣的同学一起来啊。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合API</title>
      <link href="/2023/03/15/VUE3%E7%BB%84%E5%90%88API/"/>
      <url>/2023/03/15/VUE3%E7%BB%84%E5%90%88API/</url>
      
        <content type="html"><![CDATA[<h6 id="setup-基本使用"><a href="#setup-基本使用" class="headerlink" title="setup()基本使用"></a>setup()基本使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line">        <span class="keyword">import</span> &#123; ref &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>这是组合api最基本的用法，ref（）方法是用来定义相应式数据的。记住一定要retun 对象出来才能在模版中使用，才是相应式的。<br>在其中调用可以直接使用this来调用</p></blockquote><blockquote><p>还有一种用法，是使用模版<script setup> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt; </span><br><span class="line">        <span class="keyword">import</span> &#123; ref &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>这是组合api最基本的用法，ref（）方法是用来定义相应式数据的。在这里可以不需要retun因为语法糖已经帮你处理了。<br>在其中调用可以不能使用this来调用，调用的结果是undefined。需要通过.value来调用</p></blockquote><h6 id="访问Props"><a href="#访问Props" class="headerlink" title="访问Props"></a>访问Props</h6><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>你要注意了，props在不解构的情况下是响应式的。一但解构将不再是相应式数据。建议通过props.来调用你的值<br>如果你想要通过解构的方式，需要如下来再次给你的数据加上相应式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">import</span> &#123; toRefs,toRef &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">       <span class="keyword">const</span> &#123; title &#125; = <span class="title function_">toRefs</span>(props)</span><br><span class="line">       <span class="keyword">const</span> title = <span class="title function_">toRef</span>(props,<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>那么toRefs和toRef有什么区别呢</p><blockquote><p>toRefs是给可枚举的对象添加响应式的，如果是基本类型或者不存在的不可能枚举的建议使用toRef来创建</p></blockquote></blockquote><h6 id="setup上下文"><a href="#setup上下文" class="headerlink" title="setup上下文"></a>setup上下文</h6><blockquote><p>传入setup函数的第二个参数是一个setup上下文对象，具体如何上代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">import</span> &#123; toRefs,toRef &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props，context</span>)&#123;</span><br><span class="line">        <span class="comment">// 透传Attributes (非响应式的对象，等价于$attrs)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>)</span><br><span class="line">        <span class="comment">// 插槽 (非响应式的对象，等价于$slotts)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slotts</span>)</span><br><span class="line">        <span class="comment">// 触发事件 (非响应式的对象，等价于$emit)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>)</span><br><span class="line">        <span class="comment">// 暴露公共属性 (非响应式的对象，等价于$expose)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>那么在setup语法糖<script setup>  </script>  中如何使用的呢。看下面代码!</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script setup&gt; </span><br><span class="line"> <span class="keyword">import</span> &#123; defineProps,defineEmits,useAttrs,useSlots &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> <span class="comment">// 获取 props</span></span><br><span class="line"> <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>:<span class="title class_">String</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 获取emit 方法，入参是一个数组支持多个输入</span></span><br><span class="line"><span class="keyword">const</span> emit =<span class="title function_">defineProps</span>([<span class="string">&quot;onFn1&quot;</span>,<span class="string">&quot;onFn2&quot;</span>])</span><br><span class="line"> <span class="comment">// 调用方式</span></span><br><span class="line"> <span class="title function_">emit</span>(<span class="string">&quot;onFn1&quot;</span>,<span class="number">123</span>)    </span><br><span class="line"> <span class="title function_">emit</span>(<span class="string">&quot;onFn2&quot;</span>,<span class="number">234</span>)    </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取 $attrs</span></span><br><span class="line"> <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span><br><span class="line"> <span class="comment">// 获取$slots</span></span><br><span class="line"> <span class="keyword">const</span> slots= <span class="title function_">useSlots</span>()</span><br><span class="line"></span><br><span class="line"> &lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>在这里特别提醒：我们使用setup语法糖相当于闭包，处理当前的template模版能访问谁度都访问不到包括使用ref访问子组件的方式所以有了如下api</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt; </span><br><span class="line"><span class="keyword">import</span> &#123; defineExpose&#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="comment">// 这个时候通过 defineExpose将a暴露出去了就能通过ref访问到了，但是b不行</span></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">    a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>那么我们如何获取DOM元素调用DOM元素呢</p><blockquote><ol><li>语法糖 <p ref="refName"> 调用 const refName &#x3D; ref() 这样就行了只要保持和你在模版中的命名一致就行</li><li>非语法糖就更加简单和vue2 保持一致 可以直接 this.refs.refName</li></ol></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM世界</title>
      <link href="/2023/03/14/BOM%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/14/BOM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h6 id="BOM描述"><a href="#BOM描述" class="headerlink" title="BOM描述"></a>BOM描述</h6><blockquote><p>   浏览器对象模型，他提供独立于内容而与浏览器窗口进行交互的对象，其核心window。</p></blockquote><h6 id="BOM构成"><a href="#BOM构成" class="headerlink" title="BOM构成"></a>BOM构成</h6><blockquote><p>   document location navigation screen history</p></blockquote><h6 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h6><ol><li>窗口加载事件<blockquote><p>   window.onload() 是窗口（页面）加载事件，当文档内容完全加载完毕会(包括图像，css，脚本文件等)触发调用该处理函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> =<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>调整窗口大小事件（window.onresize()）<br> window.onresize()是调整窗口大小变化时会触发onresize事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h6 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h6><blockquote><p>  window对象提供了两种定时器方法:1. setTimeout 2. setInterVal</p></blockquote><ol><li>setTimeot()定时器，定时多少时间之后才执行</li><li>window.clearTimeout()停止定时器</li><li>setInterval()每隔一段时间执行</li><li>window.clearInterval()停止定时器</li></ol><h6 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h6><pre><code>navigator对象包含有关浏览器的信息，有很多属性，常见的有userAgent，该属性返回user-agent的值，判断是那个终端打开页面</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/phone|pad|pod|iphone|ios|Anroid/</span>))&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>= <span class="string">&quot;&quot;</span> ;<span class="comment">// 手机</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css世界</title>
      <link href="/2023/03/14/css%E4%B8%96%E7%95%8C/"/>
      <url>/2023/03/14/css%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文本缩进 \</p><blockquote><p>文本缩进属性是用来指定文本的第一行缩进<br><code>p&#123;text-index: 14px&#125; </code></p></blockquote></blockquote><blockquote><p>字体设置 \</p><blockquote><p>font-family 属性应该设置几个字体名车作为一种后备机制，如果浏览器不支持第一种字体就会尝试下一种<br><code> font-family:宋体</code></p></blockquote></blockquote><blockquote><p>css显示与可见性</p><blockquote><p>display可以隐藏元素，不占位置。visibility隐藏元素依然占据位置<br><code> display:none;visibility:hidden;</code></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
