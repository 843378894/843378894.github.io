<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>three-入门学习-简单的3D实现</title>
      <link href="/2023/04/06/three-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/06/three-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="three-入门学习"><a href="#three-入门学习" class="headerlink" title="three-入门学习"></a>three-入门学习</h3><h6 id="1-安装-three-js"><a href="#1-安装-three-js" class="headerlink" title="1. 安装 three.js"></a>1. 安装 three.js</h6><blockquote><p>npm install three 安装好之后复制如下代码就能跑起来</p><blockquote><p>3D 效果是前端绕不过的发展趋势，未来会有更多的 3D 场景的需要。</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建一个三维场景Scene 构造器，相当于你需要放东西的盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建一个相机 PerspectiveCamera 透明相机，相当于一个投影仪，投影出3D效果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// fov — 摄像机视锥体垂直视野角度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// aspect — 摄像机视锥体长宽比</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// near — 摄像机视锥体近端面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// far — 摄像机视锥体远端面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="number">75</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="number">0.1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="number">1000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建你的渲染器，用来渲染你定义的图形动画</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 设置渲染图形的大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 添加元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//  定义立方体图形</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 构建立方体的材质和颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0x00ff00</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 网格内的物体 构成定义的立方体图形，并且使用什么样的材质</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 放在环境中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">scene.<span class="title function_">add</span>(cube);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 坐标轴的位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 频率刷新 切换的时候会停止</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">requestAnimationFrame</span>(animate);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 物体旋转的大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  cube.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">0.01</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  cube.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 图形渲染函数 传入场景和相机</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  renderer.<span class="title function_">render</span>(scene, camera);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">animate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.logo</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">6em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">1.5em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">will-change</span>: filter;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transition</span>: filter <span class="number">300ms</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">#646cffaa</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.logo</span><span class="selector-class">.vue</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2em</span> <span class="number">#42b883aa</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Three </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-effect实现</title>
      <link href="/2023/04/03/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-effect%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/03/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-effect%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-effect实现"><a href="#vue3源码手写-effect实现" class="headerlink" title="vue3源码手写-effect实现"></a>vue3源码手写-effect实现</h3><h6 id="1-packages-reactivity-src-effect-ts"><a href="#1-packages-reactivity-src-effect-ts" class="headerlink" title="1. packages\reactivity\src\effect.ts"></a>1. packages\reactivity\src\effect.ts</h6><blockquote><p>第一步在 packages\reactivity\src\effect.ts 创建effect文件，effect做的就是依赖收集对get set put等操作进行收集</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    reactive,</span><br><span class="line">    readonly,</span><br><span class="line">    shallowReactive,</span><br><span class="line">    shallowReadonly,</span><br><span class="line">  &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-reactive-实现"><a href="#2-reactive-实现" class="headerlink" title="2. reactive 实现"></a>2. reactive 实现</h6><blockquote><p>第二步在 对应目录下创建对应的文件（packages\reactivity\src\reactive.ts），内容看代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fun,options:any=&#123;&#125;</span>)&#123;</span><br><span class="line"><span class="keyword">const</span>  effect = <span class="title function_">creatReactEffect</span>(fun,options)</span><br><span class="line"><span class="comment">// 不是懒执行 直接执行</span></span><br><span class="line">    <span class="keyword">if</span>(!options?.<span class="property">lazy</span>)&#123;</span><br><span class="line">        <span class="title function_">effect</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  定义属性用作区分。每个属性都会有自己的uid</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"><span class="comment">// 储存当前的effect</span></span><br><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">creatReactEffect</span>(<span class="params">fun,options</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> effect = <span class="keyword">function</span> <span class="title function_">reactEffect</span>(<span class="params"></span>)&#123;</span><br><span class="line">        activeEffect=effect</span><br><span class="line">        <span class="title function_">fun</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    effect.<span class="property">id</span> = uid++; <span class="comment">//区分effect</span></span><br><span class="line">    effect.<span class="property">_isEffect</span> = <span class="literal">true</span><span class="comment">//区分effect 是不是响应式</span></span><br><span class="line">    effect.<span class="property">raw</span> = fun<span class="comment">//保存传进来的方法</span></span><br><span class="line">    effect.<span class="property">options</span> = options<span class="comment">//保存传进来的属性</span></span><br><span class="line">    <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集依赖effect 在获取数据的时候触发get 收集effect</span></span><br><span class="line"><span class="keyword">let</span> targetMap= <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target,type,key</span>)&#123;</span><br><span class="line">    <span class="comment">// 是undefined则说明没有调用或者不是响应数据</span></span><br><span class="line">    <span class="keyword">if</span>(activeEffect === <span class="literal">undefined</span>) <span class="keyword">return</span> </span><br><span class="line">    <span class="comment">// 获取effect &#123;target:dep&#125;</span></span><br><span class="line">    <span class="keyword">let</span> depMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="keyword">if</span>(!depMap)&#123;</span><br><span class="line">        <span class="comment">// 没有 depMap 说明第一次调用</span></span><br><span class="line">        targetMap.<span class="title function_">set</span>(target,(depMap= <span class="keyword">new</span> <span class="title class_">Map</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有depMap 就要判断有没有收集属性依赖</span></span><br><span class="line">    <span class="keyword">let</span> dep = depMap.<span class="title function_">get</span>(key)</span><br><span class="line">    <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">        <span class="comment">// 没有收集属性依赖就要添加</span></span><br><span class="line">        depMap.<span class="title function_">set</span>(key,(dep= <span class="keyword">new</span> <span class="title class_">Set</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有属性要看看依赖收集没有</span></span><br><span class="line">    <span class="keyword">if</span>(!dep.<span class="title function_">has</span>(activeEffect))&#123;</span><br><span class="line">        <span class="comment">// 没有要添加</span></span><br><span class="line">        dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-reactive实现</title>
      <link href="/2023/03/22/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-reactive%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/03/22/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-reactive%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-reactive实现"><a href="#vue3源码手写-reactive实现" class="headerlink" title="vue3源码手写-reactive实现"></a>vue3源码手写-reactive实现</h3><h6 id="1-packages-reactivity-src-index-ts-按照源码该位置做入口，只做导入导出"><a href="#1-packages-reactivity-src-index-ts-按照源码该位置做入口，只做导入导出" class="headerlink" title="1. packages\reactivity\src\index.ts 按照源码该位置做入口，只做导入导出"></a>1. packages\reactivity\src\index.ts 按照源码该位置做入口，只做导入导出</h6><blockquote><p>第一步在 packages\reactivity\src\index.ts 下导入导出我们在reactive.ts的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    reactive,</span><br><span class="line">    readonly,</span><br><span class="line">    shallowReactive,</span><br><span class="line">    shallowReadonly,</span><br><span class="line">  &#125; <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-reactive-实现"><a href="#2-reactive-实现" class="headerlink" title="2. reactive 实现"></a>2. reactive 实现</h6><blockquote><p>第二步在 对应目录下创建对应的文件（packages\reactivity\src\reactive.ts），内容看代码。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// shared 中写的是公共代码 需要先npm run build 打包才能引入，build报错的话先执行yarn install 再build </span></span><br><span class="line"><span class="keyword">import</span> &#123; isObject&#125; <span class="keyword">from</span><span class="string">&#x27;@vue/shared&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactiveHandlers,shallowReactiveHandlers,readonlyHandlers,shallowReadonlyHandlers&#125; <span class="keyword">from</span> <span class="string">&#x27;./baseHandlers&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vue3核心方法实现</span></span><br><span class="line"><span class="comment"> * reactive  创建响应式数据</span></span><br><span class="line"><span class="comment"> * shallowReactive 第一层的响应式</span></span><br><span class="line"><span class="comment"> * readonly 只读方法</span></span><br><span class="line"><span class="comment"> * readonly浅层的只读</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">false</span>,reactiveHandlers)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">shallowReactive</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">false</span>,shallowReactiveHandlers)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">true</span>,readonlyHandlers)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">shallowReadonly</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createReactObj</span>(target,<span class="literal">true</span>,shallowReadonlyHandlers)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * weakMap  相当于Map 但是key是对象 而且有自动垃圾回收</span></span><br><span class="line"><span class="comment"> * 使用weakMap 储存代理了的target是性能优化，防止已经代理过的数据多次代理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> reactiveMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">const</span> readonlyMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高阶函数根据入参处理不同的业务群相同业务又能共用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 代理核心方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@target</span> 目标对象，创建响应式传入的对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@isReadonly</span> 是否只读</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@baseHandlers</span>  代理捕获核心  相当于Objeact 的get set 等捕获设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span>   <span class="title function_">createReactObj</span>(<span class="params">target,isReadonly,baseHandlers</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">isObject</span>(target))&#123;</span><br><span class="line">        <span class="comment">// 如果不是对象就直接返回 proxy只能代理对象</span></span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 根据是否只读来区分使用map集合储存</span></span><br><span class="line">    <span class="keyword">const</span> proxymap = isReadonly ? readonlyMap : reactiveMap</span><br><span class="line">    <span class="comment">// 取一下数据看集合中是否有该对象</span></span><br><span class="line">    <span class="keyword">const</span> proxyEs = proxymap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="comment">// 在集合中表明已经代理过了，直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(proxyEs)&#123;</span><br><span class="line">        <span class="keyword">return</span> proxyEs</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target,baseHandlers)</span><br><span class="line">    proxymap.<span class="title function_">set</span>(target,proxy)</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-baseHandlers-代理捕获器对象书写"><a href="#3-baseHandlers-代理捕获器对象书写" class="headerlink" title="3. baseHandlers 代理捕获器对象书写"></a>3. baseHandlers 代理捕获器对象书写</h6><blockquote><p>第三步 先对应目录下创建文件 （packages\reactivity\src\baseHandlers.ts）。实现看代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isObject &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/shared&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, readonly &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该文件写的是代理的捕获配置对象不了解的话看一下ES6的Proxy ;new Proxy(target,&#123;get:function,set:function,delete:function&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 注意这里是对象不是方法 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> get = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>()</span><br><span class="line"><span class="keyword">const</span> shallowGet = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> readonlyGet = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> shallowReadonlyGet = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createGetter</span>(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="comment">/*#__PURE__*/</span> <span class="title function_">createSetter</span>()</span><br><span class="line"><span class="keyword">const</span> shallowSet =<span class="comment">/*#__PURE__*/</span> <span class="title function_">createSetter</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  代理中的set函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target,key,value,receiver</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,value,receiver)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params">isReadonly=<span class="literal">false</span>,shallow=<span class="literal">false</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target,key,receiver</span>)&#123;</span><br><span class="line">        <span class="comment">// Reflect.get 相当于target[key] 好处是这个方法不会直接操作原对象&#123;a:&#123;b:&#123;&#125;&#125;&#125; res = &#123;b:&#123;&#125;&#125;</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">        <span class="keyword">if</span>(!isReadonly)&#123;</span><br><span class="line">            <span class="comment">// 不是只读操作 要做依赖收集</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shallow)&#123;</span><br><span class="line">            <span class="comment">//  浅层代理直接返回 之前在reactve中已经代理过一次了</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">isObject</span>(res))&#123;</span><br><span class="line">            <span class="comment">// 这里判断那到的value还是对象 我们在外面使用了 target.a 会触发get 方法走进createGetter 现在的res = &#123;b:&#123;&#125;&#125;</span></span><br><span class="line">            <span class="comment">// 递归调用代理方法</span></span><br><span class="line">            <span class="comment">// 遇到的面试题:为什么使用proxy性能根据好，因为Objeact.definepropty 上来就是递归处理，proxy是懒代理只有在调用的时候才会去递归代理</span></span><br><span class="line">            <span class="keyword">return</span> isReadonly ? <span class="title function_">readonly</span>(res) : <span class="title function_">reactive</span>(res)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reactiveHandlers =&#123;</span><br><span class="line">    get,</span><br><span class="line">    set</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowReactiveHandlers =&#123;</span><br><span class="line">    <span class="attr">get</span>:shallowGet,</span><br><span class="line">    <span class="attr">set</span>:shallowSet</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readonlyHandlers =&#123;</span><br><span class="line">    <span class="attr">get</span>:readonlyGet,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="comment">// readonly 的响应式对象不可以修改值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Set operation on key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>,</span><br><span class="line">          target</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowReadonlyHandlers =&#123;</span><br><span class="line">    <span class="attr">get</span>:shallowReadonlyGet,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="comment">// readonly 的响应式对象不可以修改值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Set operation on key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>,</span><br><span class="line">          target</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们才开了个头，让我们慢慢的一起完善把。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-打包配置</title>
      <link href="/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-打包配置"><a href="#vue3源码手写-打包配置" class="headerlink" title="vue3源码手写-打包配置"></a>vue3源码手写-打包配置</h3><h6 id="文件夹创建"><a href="#文件夹创建" class="headerlink" title="文件夹创建"></a>文件夹创建</h6><blockquote><p>在packages文件夹下面创建reactivity和shared文件夹，初始化创建对应的package.json并且创建src文件夹下面再创建一个index.tS文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reactivity -&gt; package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  打包更具这个名称生成文件在node_modules中</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@vue/reactivity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">    <span class="comment">// 打包生成的文件类型格式打包后能在dist文件中体现</span></span><br><span class="line">    <span class="string">&quot;buildOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;vueReactivity&quot;</span>,</span><br><span class="line">        <span class="string">&quot;formats&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;esm-bundler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;global&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shared -&gt; package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  打包更具这个名称生成文件在node_modules中</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@vue/shared&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">    <span class="comment">// 打包生成的文件类型格式打包后能在dist文件中体现</span></span><br><span class="line">    <span class="string">&quot;buildOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;vueShared&quot;</span>,</span><br><span class="line">        <span class="string">&quot;formats&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;esm-bundler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cjs&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在写源码之前我们要把项目搭建好，上次我们搭建了环境，那么解下来就是对项目进行打包配置。vue3是如何能做到每个文件独立运行也能打包在一块呢。</p></blockquote><h6 id="1-我们先对package-json动手"><a href="#1-我们先对package-json动手" class="headerlink" title="1. 我们先对package.json动手"></a>1. 我们先对package.json动手</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,<span class="comment">//表示这是一个私有项目，不会被 publish 到 npm库</span></span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,<span class="comment">// 这里是开启ES6模块，vue3不支持commonjs。你可以先不管他，等你在引入文件操作文件的时候会提醒你</span></span><br><span class="line"><span class="string">&quot;workspaces&quot;</span>: [<span class="comment">//简单讲就是将每个项目的 node_modules 都提升到根目录的 node_modules 中，形成多个项目复用同一套依赖包效果。</span></span><br><span class="line">    <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">],</span><br><span class="line"> <span class="string">&quot;scripts&quot;</span>: &#123;<span class="comment">//书写脚本</span></span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;node scripts/build.js&quot;</span>, <span class="comment">// 打包脚本</span></span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;node scripts/dev.js&quot;</span> <span class="comment">// 打包dev环境</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h6 id="2-在我们配置好了package-json-脚本之后我们要在根目录下面创建scripts文件夹和build-js与dev-js这俩个脚本文件"><a href="#2-在我们配置好了package-json-脚本之后我们要在根目录下面创建scripts文件夹和build-js与dev-js这俩个脚本文件" class="headerlink" title="2. 在我们配置好了package.json 脚本之后我们要在根目录下面创建scripts文件夹和build.js与dev.js这俩个脚本文件"></a>2. 在我们配置好了package.json 脚本之后我们要在根目录下面创建scripts文件夹和build.js与dev.js这俩个脚本文件</h6><h6 id="3-我们先对build-js书写打包时所需要执行的代码"><a href="#3-我们先对build-js书写打包时所需要执行的代码" class="headerlink" title="3. 我们先对build.js书写打包时所需要执行的代码"></a>3. 我们先对build.js书写打包时所需要执行的代码</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  编辑打包设置文件 monerepo</span></span><br><span class="line"><span class="comment">// node 内置文件读写方法</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; execa &#125; <span class="keyword">from</span> <span class="string">&quot;execa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  fs.readdirSync 读取对应文件夹下面的目录</span></span><br><span class="line"><span class="keyword">const</span> dirs = fs.<span class="title function_">readdirSync</span>(<span class="string">&quot;packages&quot;</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 对应路径下的文件是否是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (!fs.<span class="title function_">statSync</span>(<span class="string">`packages/<span class="subst">$&#123;p&#125;</span>`</span>).<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 对所有的文件进行遍历并行执行打包动作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runParallel</span> = (<span class="params">targets, buildFn</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> target <span class="keyword">of</span> targets) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(<span class="title function_">buildFn</span>(target))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打包核心调用execa执行 rollup 配置打包</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">build</span> = <span class="keyword">async</span>(<span class="params">pkg</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里执行完打包结束</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">execa</span>(<span class="string">&#x27;rollup&#x27;</span>, [<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--environment&#x27;</span>, <span class="string">`TARGET:<span class="subst">$&#123;pkg&#125;</span>`</span>], &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用打包函数</span></span><br><span class="line"><span class="title function_">runParallel</span>(dirs, build)</span><br></pre></td></tr></table></figure><h6 id="脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup-config-js文件，在根目录下创建。"><a href="#脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup-config-js文件，在根目录下创建。" class="headerlink" title="脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup.config.js文件，在根目录下创建。"></a>脚本书写完了就要接着上面的写rollup配置文件，我们在执行build脚本的时候会去调用配置文件，创建rollup.config.js文件，在根目录下创建。</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 解析ts 插件</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span></span><br><span class="line"><span class="comment">// 解下json的插件</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-json&#x27;</span></span><br><span class="line"><span class="comment">// 解析第三方插件</span></span><br><span class="line"><span class="keyword">import</span> resolvePlugin <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="comment">// 创建 require 的方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRequire &#125; <span class="keyword">from</span> <span class="string">&#x27;node:module&#x27;</span></span><br><span class="line"><span class="comment">// 获取更目录的</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"><span class="comment">// 获取path 方法</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">require</span> = <span class="title function_">createRequire</span>(</span><br><span class="line">    <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br><span class="line"><span class="keyword">const</span> __dirname = <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">    <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取文件路径</span></span><br><span class="line"><span class="keyword">const</span> packagesDir = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;packages&#x27;</span>)</span><br><span class="line">    <span class="comment">//  获取需要打包的包</span></span><br><span class="line"><span class="keyword">const</span> packageDir = path.<span class="title function_">resolve</span>(packagesDir, process.<span class="property">env</span>.<span class="property">TARGET</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取每个包的配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = p =&gt; path.<span class="title function_">resolve</span>(packageDir, p)</span><br><span class="line">    <span class="comment">// 获取每个包的 package.json</span></span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="title function_">resolve</span>(<span class="string">`package.json`</span>))</span><br><span class="line">    <span class="comment">//  取出包名</span></span><br><span class="line"><span class="keyword">const</span> name = path.<span class="title function_">basename</span>(packageDir)</span><br><span class="line">    <span class="comment">//  创建格式对应表</span></span><br><span class="line"><span class="keyword">const</span> outputOpions = &#123;</span><br><span class="line">    <span class="string">&quot;esm-bundler&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="title function_">resolve</span>(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.esm-bundler.js`</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;es&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;cjs&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="title function_">resolve</span>(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.cjs.js`</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;global&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="title function_">resolve</span>(<span class="string">`dist/<span class="subst">$&#123;name&#125;</span>.global.js`</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;iife&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取每个包下面设定的buildOptions格式</span></span><br><span class="line"><span class="keyword">const</span> options = pkg.<span class="property">buildOptions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置打包函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createConfig</span>(<span class="params">format, output</span>) &#123;</span><br><span class="line">    <span class="comment">//  进行打包</span></span><br><span class="line">    output.<span class="property">name</span> = options.<span class="property">name</span></span><br><span class="line">    output.<span class="property">sourcemap</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//  生成rollup配置</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="title function_">resolve</span>(<span class="string">&quot;src/index.ts&quot;</span>), <span class="comment">//导入</span></span><br><span class="line">        <span class="comment">// 打包配置</span></span><br><span class="line">        output,</span><br><span class="line">        <span class="comment">// 这里是插件的调用</span></span><br><span class="line">        <span class="title class_">Plugin</span>: [</span><br><span class="line">            <span class="title function_">json</span>(),</span><br><span class="line">            <span class="title function_">ts</span>(&#123;</span><br><span class="line">                <span class="attr">tsconfig</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;tsconfig.json&#x27;</span>)</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="title function_">resolvePlugin</span>()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  注意打包结束的时候一定要retun对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> options.<span class="property">formats</span>.<span class="title function_">map</span>(<span class="function"><span class="params">format</span> =&gt;</span> <span class="title function_">createConfig</span>(format, outputOpions[format]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上面的代码就是打包配置，rollup打包工具会根据你的打包进行</p></blockquote><h6 id="tsconfig文件修改"><a href="#tsconfig文件修改" class="headerlink" title="tsconfig文件修改"></a>tsconfig文件修改</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* Language and Environment */</span></span><br><span class="line">    <span class="comment">// 需要更改不支持ES5</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,                                </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要更改不支持ES5</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ESNext&quot;</span>,                                <span class="comment">/* Specify what module code is generated. */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,                             <span class="comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. </span></span><br><span class="line"><span class="comment">    &quot;forceConsistentCasingInFileNames&quot;: true,            /* Ensure that casing is correct in imports. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    不使用严格模式  个人选择</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,                                      <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">  </span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 下面这些是文件路径配置，在引用别的包的时候TS检索不会报错</span></span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@vue/*&quot;</span>: [<span class="string">&quot;packages/*/src&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="dev-js-脚本编写"><a href="#dev-js-脚本编写" class="headerlink" title="dev.js 脚本编写"></a>dev.js 脚本编写</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  编辑打包设置文件 monerepo</span></span><br><span class="line"><span class="comment">// node 内置文件读写方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; execa &#125; <span class="keyword">from</span> <span class="string">&quot;execa&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">build</span> = <span class="keyword">async</span>(<span class="params">pkg</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">//  -cw 监听 相当于热跟新</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">execa</span>(<span class="string">&#x27;rollup&#x27;</span>, [<span class="string">&#x27;-cw&#x27;</span>, <span class="string">&#x27;--environment&#x27;</span>, <span class="string">`TARGET:<span class="subst">$&#123;pkg&#125;</span>`</span>], &#123; <span class="attr">stdio</span>: <span class="string">&#x27;inherit&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  打包函数</span></span><br><span class="line"><span class="title function_">build</span>(<span class="string">&quot;reactivity&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这个是打包配置文件，进行到这里就已经能将我们需要写的东西编译出来。后续文章开始我们进行源码书写，感兴趣的同学一起来啊。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3源码手写-环境搭建</title>
      <link href="/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/16/vue3%E6%BA%90%E7%A0%81%E6%89%8B%E5%86%99-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="vue3源码手写-环境搭建"><a href="#vue3源码手写-环境搭建" class="headerlink" title="vue3源码手写-环境搭建"></a>vue3源码手写-环境搭建</h3><blockquote><p>工作中开始正式使用vue3，既然使用了就看看源码手写一个mini版。今天时间有限先从环境搭建开始，那么请往下看</p></blockquote><h6 id="1-rollup打包monorepo"><a href="#1-rollup打包monorepo" class="headerlink" title="1. rollup打包monorepo"></a>1. rollup打包monorepo</h6><blockquote><p>在我们查看源码文件的时候你会发现使用的是rollup打包monorepo。这样的方式有什么好处呢。能够让每个小的包能独立打包运行。也能整体打包运行，vue3源码的所有内容堵在packages文件夹下面，没包都是独立可打包运行的。</p></blockquote><h6 id="2-创建文件夹初始化文件"><a href="#2-创建文件夹初始化文件" class="headerlink" title="2. 创建文件夹初始化文件"></a>2. 创建文件夹初始化文件</h6><blockquote><ol><li>创建一个my-mini-vue3文件</li><li>进入到文件打开终端运行初始化命令， yarn init -y</li><li>命令运行完之后会生成package.json 文件</li></ol></blockquote><h6 id="3-依赖下载"><a href="#3-依赖下载" class="headerlink" title="3. 依赖下载"></a>3. 依赖下载</h6><blockquote><ol><li>下载ts，运行 yarn add typescript -D -W</li><li>生成ts配置文件 运行 npx tsc –init()</li><li>安装我们打包需要的依赖运行 yarn add rollup rollup-plugin-typescript2 @rollup&#x2F;plugin-node-resolve @rollup&#x2F;plugin-json execa -D -W</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">       &quot;@rollup/plugin-json&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">       &quot;@rollup/plugin-node-resolve&quot;: &quot;^15.0.1&quot;,</span><br><span class="line">       &quot;execa&quot;: &quot;^7.1.1&quot;,</span><br><span class="line">       &quot;rollup&quot;: &quot;^3.19.1&quot;,</span><br><span class="line">       &quot;rollup-plugin-typescript2&quot;: &quot;^0.34.1&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   @rollup/plugin-node-resolve 插件允许我们加载第三方模块</span><br><span class="line">   @rollup/plugin-json 支持导入json，没有 json 插件的支持我们在导入 json 文件时会报错</span><br><span class="line">   rollup-plugin-typescript2  typescript的差距 配合tsconfig.json</span><br><span class="line">   execa 插件将它们转换为ES6版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>好了今天环境已经搭建好了，明天来写打包配置的东西，欢迎大家指点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合API</title>
      <link href="/2023/03/15/VUE3%E7%BB%84%E5%90%88API/"/>
      <url>/2023/03/15/VUE3%E7%BB%84%E5%90%88API/</url>
      
        <content type="html"><![CDATA[<h6 id="setup-基本使用"><a href="#setup-基本使用" class="headerlink" title="setup()基本使用"></a>setup()基本使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line">        <span class="keyword">import</span> &#123; ref &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>这是组合api最基本的用法，ref（）方法是用来定义相应式数据的。记住一定要retun 对象出来才能在模版中使用，才是相应式的。<br>在其中调用可以直接使用this来调用</p></blockquote><blockquote><p>还有一种用法，是使用模版<script setup> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt; </span><br><span class="line">        <span class="keyword">import</span> &#123; ref &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>)</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>这是组合api最基本的用法，ref（）方法是用来定义相应式数据的。在这里可以不需要retun因为语法糖已经帮你处理了。<br>在其中调用可以不能使用this来调用，调用的结果是undefined。需要通过.value来调用</p></blockquote><h6 id="访问Props"><a href="#访问Props" class="headerlink" title="访问Props"></a>访问Props</h6><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>你要注意了，props在不解构的情况下是响应式的。一但解构将不再是相应式数据。建议通过props.来调用你的值<br>如果你想要通过解构的方式，需要如下来再次给你的数据加上相应式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">import</span> &#123; toRefs,toRef &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props</span>)&#123;</span><br><span class="line">       <span class="keyword">const</span> &#123; title &#125; = <span class="title function_">toRefs</span>(props)</span><br><span class="line">       <span class="keyword">const</span> title = <span class="title function_">toRef</span>(props,<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>那么toRefs和toRef有什么区别呢</p><blockquote><p>toRefs是给可枚举的对象添加响应式的，如果是基本类型或者不存在的不可能枚举的建议使用toRef来创建</p></blockquote></blockquote><h6 id="setup上下文"><a href="#setup上下文" class="headerlink" title="setup上下文"></a>setup上下文</h6><blockquote><p>传入setup函数的第二个参数是一个setup上下文对象，具体如何上代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">import</span> &#123; toRefs,toRef &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props，context</span>)&#123;</span><br><span class="line">        <span class="comment">// 透传Attributes (非响应式的对象，等价于$attrs)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>)</span><br><span class="line">        <span class="comment">// 插槽 (非响应式的对象，等价于$slotts)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slotts</span>)</span><br><span class="line">        <span class="comment">// 触发事件 (非响应式的对象，等价于$emit)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>)</span><br><span class="line">        <span class="comment">// 暴露公共属性 (非响应式的对象，等价于$expose)</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>那么在setup语法糖<script setup>  </script>  中如何使用的呢。看下面代码!</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script setup&gt; </span><br><span class="line"> <span class="keyword">import</span> &#123; defineProps,defineEmits,useAttrs,useSlots &#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> <span class="comment">// 获取 props</span></span><br><span class="line"> <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>:<span class="title class_">String</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 获取emit 方法，入参是一个数组支持多个输入</span></span><br><span class="line"><span class="keyword">const</span> emit =<span class="title function_">defineProps</span>([<span class="string">&quot;onFn1&quot;</span>,<span class="string">&quot;onFn2&quot;</span>])</span><br><span class="line"> <span class="comment">// 调用方式</span></span><br><span class="line"> <span class="title function_">emit</span>(<span class="string">&quot;onFn1&quot;</span>,<span class="number">123</span>)    </span><br><span class="line"> <span class="title function_">emit</span>(<span class="string">&quot;onFn2&quot;</span>,<span class="number">234</span>)    </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取 $attrs</span></span><br><span class="line"> <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span><br><span class="line"> <span class="comment">// 获取$slots</span></span><br><span class="line"> <span class="keyword">const</span> slots= <span class="title function_">useSlots</span>()</span><br><span class="line"></span><br><span class="line"> &lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>在这里特别提醒：我们使用setup语法糖相当于闭包，处理当前的template模版能访问谁度都访问不到包括使用ref访问子组件的方式所以有了如下api</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt; </span><br><span class="line"><span class="keyword">import</span> &#123; defineExpose&#125; feom <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line"><span class="comment">// 这个时候通过 defineExpose将a暴露出去了就能通过ref访问到了，但是b不行</span></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">    a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><blockquote><p>那么我们如何获取DOM元素调用DOM元素呢</p><blockquote><ol><li>语法糖 <p ref="refName"> 调用 const refName &#x3D; ref() 这样就行了只要保持和你在模版中的命名一致就行</li><li>非语法糖就更加简单和vue2 保持一致 可以直接 this.refs.refName</li></ol></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM世界</title>
      <link href="/2023/03/14/BOM%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/14/BOM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h6 id="BOM描述"><a href="#BOM描述" class="headerlink" title="BOM描述"></a>BOM描述</h6><blockquote><p>   浏览器对象模型，他提供独立于内容而与浏览器窗口进行交互的对象，其核心window。</p></blockquote><h6 id="BOM构成"><a href="#BOM构成" class="headerlink" title="BOM构成"></a>BOM构成</h6><blockquote><p>   document location navigation screen history</p></blockquote><h6 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h6><ol><li>窗口加载事件<blockquote><p>   window.onload() 是窗口（页面）加载事件，当文档内容完全加载完毕会(包括图像，css，脚本文件等)触发调用该处理函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> =<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>调整窗口大小事件（window.onresize()）<br> window.onresize()是调整窗口大小变化时会触发onresize事件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h6 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h6><blockquote><p>  window对象提供了两种定时器方法:1. setTimeout 2. setInterVal</p></blockquote><ol><li>setTimeot()定时器，定时多少时间之后才执行</li><li>window.clearTimeout()停止定时器</li><li>setInterval()每隔一段时间执行</li><li>window.clearInterval()停止定时器</li></ol><h6 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h6><pre><code>navigator对象包含有关浏览器的信息，有很多属性，常见的有userAgent，该属性返回user-agent的值，判断是那个终端打开页面</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/phone|pad|pod|iphone|ios|Anroid/</span>))&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>= <span class="string">&quot;&quot;</span> ;<span class="comment">// 手机</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css世界</title>
      <link href="/2023/03/14/css%E4%B8%96%E7%95%8C/"/>
      <url>/2023/03/14/css%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文本缩进 \</p><blockquote><p>文本缩进属性是用来指定文本的第一行缩进<br><code>p&#123;text-index: 14px&#125; </code></p></blockquote></blockquote><blockquote><p>字体设置 \</p><blockquote><p>font-family 属性应该设置几个字体名车作为一种后备机制，如果浏览器不支持第一种字体就会尝试下一种<br><code> font-family:宋体</code></p></blockquote></blockquote><blockquote><p>css显示与可见性</p><blockquote><p>display可以隐藏元素，不占位置。visibility隐藏元素依然占据位置<br><code> display:none;visibility:hidden;</code></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
